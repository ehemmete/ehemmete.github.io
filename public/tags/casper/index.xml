<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casper on My Thoughts</title>
    <link>http://localhost:1313/tags/casper/</link>
    <description>Recent content in Casper on My Thoughts</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Eric Hemmeter</copyright>
    <lastBuildDate>Fri, 02 Feb 2018 20:28:49 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/casper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting the Screen Saver to a static image</title>
      <link>http://localhost:1313/posts/setting-the-screen-saver-to-a-static-image/</link>
      <pubDate>Fri, 02 Feb 2018 20:28:49 +0000</pubDate>
      <guid>http://localhost:1313/posts/setting-the-screen-saver-to-a-static-image/</guid>
      <description>&lt;p&gt;On our Windows systems we have a static image as our screen saver and I wanted to match that on our Macs.  There are several options in the Screen Saver settings of System Preferences.  I needed to figure out how to set a default across all our Macs with a script.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/02/screen-shot-2018-02-02-at-1-55-51-pm.png&#34; alt=&#34;Screen Shot 2018-02-02 at 1.55.51 PM.png&#34;&gt;  We wanted a single image statically on the screen.  By making a folder with one image in it, we can use the slideshow options to show our single image. After setting things up the way I wanted, I looked around to see where the settings were stored.  You can use something like &lt;a href=&#34;https://fsmonitor.com&#34;&gt;FSMonitor&lt;/a&gt; to watch what files are edited when you change things in System Preferences.  These settings are per user and per device, so they end up in ~/Library/ByHost/com.apple.screensaver.plist, ~/Library/ByHost/com.apple.ScreenSaver.iLifeSlideShows.plist, and ~/Library/ByHost/com.apple.ScreenSaverPhotoChooser.plist.  If you select other options, you might not need all of these files. To work with this files, use &lt;code&gt;defaults -currentHost read [preference-domain]&lt;/code&gt;. First look at com.apple.screensaver.plist:&lt;code&gt;$ defaults -currentHost read com.apple.screensaver { PrefsVersion = 100; idleTime = 1800; moduleDict =     { moduleName = iLifeSlideshows; path = &amp;quot;/System/Library/Frameworks/ScreenSaver.framework/Resources/iLifeSlideshows.saver&amp;quot;; type = 0; }; }&lt;/code&gt;Then ~/Library/ByHost/com.apple.ScreenSaver.iLifeSlideShows.plist:&lt;code&gt;defaults -currentHost read com.apple.ScreenSaver.iLifeSlideShows { styleKey = Classic; }&lt;/code&gt;Then finally, ~/Library/ByHost/com.apple.ScreenSaverPhotoChooser.plist:&lt;code&gt;defaults -currentHost read com.apple.ScreenSaverPhotoChooser { CustomFolderDict =     { identifier = &amp;quot;/Library/Screen Savers/CompanyName&amp;quot;; name = CompanyName; }; LastViewedPhotoPath = &amp;quot;&amp;quot;; SelectedFolderPath = &amp;quot;/Library/Screen Savers/CompanyName&amp;quot;; SelectedSource = 4; }&lt;/code&gt;To set these, we use a very similar command: &lt;code&gt;defaults -currentHost write [preference-domain] [key] [value]&lt;/code&gt;. After some testing I&amp;rsquo;ve found we just need:```&#xA;#!/bin/sh&#xA;defaults -currentHost write com.apple.screensaver moduleDict -dict moduleName iLifeSlideshows path &amp;ldquo;/System/Library/Frameworks/ScreenSaver.framework/Resources/iLifeSlideshows.saver&amp;rdquo; type 0&#xA;defaults -currentHost write com.apple.ScreenSaver.iLifeSlideShows styleKey Classic&#xA;defaults -currentHost write com.apple.ScreenSaverPhotoChooser SelectedFolderPath &amp;ldquo;/Library/Screen Savers/CompanyName&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Capturing information while running Casper Imaging</title>
      <link>http://localhost:1313/posts/capturing-information-while-running-casper-imaging/</link>
      <pubDate>Fri, 06 May 2016 20:09:40 +0000</pubDate>
      <guid>http://localhost:1313/posts/capturing-information-while-running-casper-imaging/</guid>
      <description>&lt;p&gt;I recently changed jobs and am now managing a JAMF Casper suite that really hadn&amp;rsquo;t had much done to it before. Previous imaging was done via a monolithic image with Clonezilla and a lot of hand configuration. The Windows environment here is much more mature and one of the things that is done on the Windows side is to capture information about the build as it happens. This post is about replicating that on the Macs when using Casper Imaging. Sidenote: I hope to move to DEP soon and stop most of the imaging that happens here, but until then&amp;hellip; Our basic workflow is to boot from a flash drive created from an AutoCasperNBI image. From there Casper Imaging launches, is configured, and the process starts. The first thing in our configuration is a script that prompts for the builder&amp;rsquo;s Tech ID, their AD password, the user ID for the person this computer is assigned to, which part of the business they are in, and what country this computer is going to. The script also records the start time and date of the build as well as the time zone offset (more on that later). This data is written to flat files stored in /tmp/tags/. Then the rest of the install happens, OS is block copied, application packages run, and a second script copies the output of the first script to the newly installed internal drive; /Volumes/Macintosh\ HD/opt/wkstnctl/tags. This is the location that our BigFix install was looking for information from the cloned/hand configured systems. Then the client reboots and does the rest of the package installs and configuration that has to happen while booted to the &amp;ldquo;real&amp;rdquo; OS. The last thing that runs before the final reboot is a script to capture the time the build completes. This is where the time zone offset comes in. I can&amp;rsquo;t rely on the client to have the right time zone at this point. I tried (with help - Thanks MacAdmin Slack) to trigger the system to adjust the time zone automatically, but couldn&amp;rsquo;t make it automatic. So this is where the time zone offset comes into play. I have the original time zone offset and then get the current one and do the math to record completion time that matches the start time. Here is the first script (CaptureBuildInfo.sh) (priority 1): [code language=&amp;ldquo;bash&amp;rdquo;] #!/bin/sh # Capture build info including start time, tech ID, and intended user ID mkdir -p /tmp/tag/ # Record start time and time zone offset echo &amp;quot;$(date +&amp;quot;%D %H:%M&amp;quot;)&amp;quot; &amp;gt; /tmp/tag/BuildStarted.txt echo &amp;quot;$(date +&amp;quot;%z&amp;quot;)&amp;quot; &amp;gt; /tmp/tag/TimeZoneOffset.txt # Some variable defaults for tests techName=&amp;quot;&amp;quot; techNameTest=&amp;quot;false&amp;quot; pwTest=&amp;quot;kinit: Password incorrect&amp;quot; pwCounter=0 endUser=&amp;quot;&amp;quot; endUserTest=&amp;quot;false&amp;quot; pwFileName=&amp;quot;$(uuidgen).txt&amp;quot; #Enter in the URL of the JSS we are are pulling info from. (NOTE: We will need https:// and :8443 (or whatever port you use). Example: &lt;a href=&#34;https://jss.company.com:8443&#34;&gt;https://jss.company.com:8443&lt;/a&gt; ) jssURL=&amp;quot;https://my.jss.tld:8443&amp;quot; #URL for checking with AD adURL=$(host -t SRV _ldap._tcp.my.domain.tld | head -n1 | cut -d&amp;quot; &amp;quot; -f 8 | sed -e &amp;rsquo;s/.$//&amp;rsquo;) #Enter in a username and password that has the correct permissions to the JSS API for what data we need. Read Access to Accounts. jssUser=&amp;quot;apiuser&amp;quot; jssPass=&amp;quot;apipassword!&amp;quot; #Name for XML files pulled from JSS declare -x UserXML=&amp;quot;/tmp/users.xml&amp;quot; #Get list of users from JSS /usr/bin/curl -k -s -u &amp;quot;$jssUser&amp;quot;:&amp;quot;$jssPass&amp;quot; &amp;quot;$jssURL&amp;quot;/JSSResource/accounts -X GET -o &amp;quot;$UserXML&amp;quot; ######################################################################### # Collect and test Tech ID name against JSS imaging accounts # while the entered name all lower case doesn&amp;rsquo;t equal the JSS based name all lower case while [[ $(echo &amp;quot;$techName&amp;quot; | tr [:upper:] [:lower:]) != $(echo &amp;quot;$techNameTest&amp;quot; | tr [:upper:] [:lower:]) ]]; do techName=`/usr/bin/osascript &amp;lt;&amp;lt;EOT tell application &amp;quot;System Events&amp;quot; with timeout of 43200 seconds activate set myReply to text returned of (display dialog &amp;quot;Please enter your Tech ID (first.last):&amp;quot; default answer &amp;quot;&amp;quot; buttons {&amp;quot;Continue&amp;quot;} default button &amp;quot;Continue&amp;quot;) end timeout end tell EOT` # check if collected name is in the list pulled from the JSS # techNameTest will equal the name stored in the JSS if this succeeds # techNameTest will equal &amp;quot;&amp;quot; if this fails techNameTest=$(xmllint &amp;quot;$UserXML&amp;quot; &amp;ndash;xpath &amp;quot;/accounts/users/user/name&amp;quot; | sed &amp;rsquo;s/&amp;lt;name&amp;gt;//g&amp;rsquo; | sed -e $&amp;rsquo;s/&amp;lt;\/name&amp;gt;/\\\n/g&amp;rsquo; | grep -i -m 1 -F &amp;quot;$techName&amp;quot;) done #write the Tech ID to our plist for collection later echo &amp;quot;$techNameTest&amp;quot; &amp;gt; /tmp/tag/TechID.txt ######################################################################### # collect and test Tech password while [ &amp;quot;$pwTest&amp;quot; == &amp;quot;kinit: Password incorrect&amp;quot; ] &amp;amp;&amp;amp; [ $pwCounter -lt 2 ]; do techPW=`/usr/bin/osascript &amp;lt;&amp;lt;EOT tell application &amp;quot;SystemUIServer&amp;quot; with timeout of 43200 seconds activate set myReply to text returned of (display dialog &amp;quot;Please enter your Tech ID password:&amp;quot; with hidden answer default answer &amp;quot;&amp;quot; buttons {&amp;quot;Continue&amp;quot;} default button &amp;quot;Continue&amp;quot;) end timeout end tell EOT` # increment the counter so that we only try twice. Don&amp;rsquo;t want to lock an account pwCounter=$[$pwCounter+1] # sadly, write the password out to a file for the next step echo &amp;quot;$techPW&amp;quot; &amp;gt; /tmp/$pwFileName # Try to authenticate as the tech using the password file # pwTest will equal &amp;quot;kinit: Password incorrect&amp;quot; if the password is wrong. # pwTest will equal &amp;quot;&amp;quot; if the password is right pwTest=$(kinit &amp;ndash;password-file=/tmp/$pwFileName &amp;quot;${techNameTest}@AM.JLLNET.COM&amp;quot; 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null) #OLD and insecure pwTest=$(ldapwhoami -vvv -h &amp;quot;$adURL&amp;quot; -D &amp;quot;${techNameTest}@am.jllnet.com&amp;quot; -x -w &amp;quot;$techPW&amp;quot; | grep Success) #securely erase the password file srm /tmp/$pwFileName done # If they have tried twice and still failed, bail out so as to not lock their account if [ $pwCounter = 2 ] &amp;amp;&amp;amp; [ &amp;quot;$pwTest&amp;quot; == &amp;quot;kinit: Password incorrect&amp;quot; ]; then /usr/bin/osascript &amp;lt;&amp;lt;EOT tell application &amp;quot;SystemUIServer&amp;quot; with timeout of 43200 seconds display dialog &amp;quot;This script can not authenticate you and doesn&amp;rsquo;t want to lock you out of your account. Please verify your password elsewhere and try again.&amp;quot; default button &amp;quot;Cancel&amp;quot; end timeout end tell EOT exit 1 fi ######################################################################### # Collect and test end user id # while the typed name does not equal a name found in AD, keep asking while [[ $(echo &amp;amp;quot;$endUserTest&amp;amp;quot; | tr [:upper:] [:lower:]) != $(echo &amp;amp;quot;$endUser&amp;amp;quot; | tr [:upper:] [:lower:]) ]]; do endUser=`/usr/bin/osascript &amp;amp;lt;&amp;amp;lt;EOT tell application &amp;amp;quot;SystemUIServer&amp;amp;quot; with timeout of 43200 seconds activate set myReply to text returned of (display dialog &amp;amp;quot;Please enter the end user&amp;rsquo;s ID (first.last):&amp;amp;quot; default answer &amp;amp;quot;&amp;amp;quot; buttons {&amp;amp;quot;Continue&amp;amp;quot;} default button &amp;amp;quot;Continue&amp;amp;quot;) end timeout end tell EOT` # check collected name against AD # endUserTest should equal the proper user name from AD if this succeeds # endUserTest will equal &amp;quot;&amp;quot; if this fails #OLD and insecure endUserTest=$(ldapsearch -LLL -x -h &amp;quot;$adURL&amp;quot; -D &amp;quot;${techNameTest}@am.jll.com&amp;quot; -w &amp;quot;$techPW&amp;quot; -b &amp;quot;dc=am,dc=jllnet,dc=com&amp;quot; &amp;quot;(&amp;amp;(objectCategory=Person)(objectClass=User)(sAMAccountName=$endUser))&amp;quot; sAMAccountName | grep sAMAccountName | cut -d&amp;quot; &amp;quot; -f 2) endUserTest=$(ldapsearch -LLL -H &amp;quot;ldap://${adURL}&amp;quot; -b &amp;quot;dc=am,dc=jllnet,dc=com&amp;quot; &amp;quot;(&amp;amp;(objectCategory=Person)(objectClass=User)(sAMAccountName=$endUser))&amp;quot; sAMAccountName 2&amp;gt;/dev/null | grep sAMAccountName | cut -d&amp;quot; &amp;quot; -f 2) done # write the end user info to the plist echo &amp;quot;$endUserTest&amp;quot; &amp;gt; /tmp/tag/JLL_SAM.txt echo &amp;quot;${endUserTest}@am.jll.com&amp;quot; &amp;gt; /tmp/tag/JLL_UserEmailID.txt echo &amp;quot;${endUserTest}@am.jll.com&amp;quot; &amp;gt; /tmp/tag/JLL_UserUPN.txt ######################################################################### # Collect the Business ID from a list businessID=`/usr/bin/osascript &amp;lt;&amp;lt;EOT tell application &amp;quot;SystemUIServer&amp;quot; activate with timeout of 600 seconds set businessID to (choose from list {&amp;quot;Unit 1&amp;quot;, &amp;quot;Unit 2&amp;quot;, &amp;quot;Unit 3&amp;quot;} with prompt &amp;quot;Choose the appropriate\nbusiness unit:&amp;quot; default items {&amp;quot;Unit 1&amp;quot;}) end timeout end tell EOT` #store the business id echo &amp;quot;$businessID&amp;quot; &amp;gt; /tmp/tag/BusinessID.txt ######################################################################### # Collect the Country ID from a list countryID=`/usr/bin/osascript &amp;lt;&amp;lt;EOT tell application &amp;quot;SystemUIServer&amp;quot; activate with timeout of 600 seconds set businessID to (choose from list {&amp;quot;US&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;MX&amp;quot;, &amp;quot;SA&amp;quot;} with prompt &amp;quot;Choose the appropriate country:&amp;quot; default items {&amp;quot;US&amp;quot;}) end timeout end tell EOT` #store the country ID echo &amp;quot;$countryID&amp;quot; &amp;gt; /tmp/tag/CountryID.txt #store build version number echo &amp;quot;2.0.0&amp;quot; &amp;gt; /tmp/tag/BuildVersion.txt [/code] It starts by creating a &amp;ldquo;tag&amp;rdquo; directory in /tmp on the boot drive. Then it uses the date command to record the start time and date in the format my organization wants. Then the date command is used again to record the time zone offset with the %z formatting. I then set some default values for variables that will be part of tests later. I also create a unique filename for briefly storing a password later (this is not ideal, but you will see why later). Then I define my JSS address, look up a domain controller, and enter authentication information for a user with JSS API read access. Be sure to adjust these to match your environment. Next I pull a list of accounts from the JSS with the API user and store this in a file (also in /tmp). Now we are ready to prompt for the installers Tech ID. The first time through the test will fail as the two variables are set to not be the same. So then the osascript (AppleScript) will run and collect the users name. That value is used to compare (case insensitive) to the list of accounts on the JSS that was saved earlier. If these match, the test is matched and we move on. Otherwise, the osascript will run again and the installer can try again. Once this is successful, the Tech ID is saved to the tags. Next use a similar loop to check the tech&amp;rsquo;s password. The osascript prompts for a password with a hidden answer. The password is stored in the unique file defined above. As the JSS is populated from our AD, I check the password against AD using kinit. If this is successful, we can break out of the loop and also get a Kerberos ticket granting ticket, which we will use in a bit. If the kinit fails, the tech gets one more chance. If they fail twice, we give up so as to not lock their AD account. Once the kinit has run, I securely remove the password file. At this point we have a valid AD user account that is also allowed on the JSS and that user has a TGT from AD. I then prompt for the ID of the end user this computer will go to. Using the tech&amp;rsquo;s ID and TGT I securely query AD to confirm that the end user ID exists. Once this ldapsearch is successful, the loop exits and the account ID is written to tags for SAM, and then a built email and UPN. The script then prompts for the business unit and country this computer is going to. An osascript shows a list with our most common answer selected by default. These are then stored in tags to be used later for policies to customize the systems. Lastly, the image version is written to a tag. Later in the configuration, script two (CopyBuildInfo.sh) runs (priority 10). [code language=&amp;ldquo;bash&amp;rdquo;] #!/bin/sh # This copies the organizational info from /tmp onto the newly imaged HD. # The info is captured when the image process is started and entered by the tech doing the imaging. if [ -d /tmp/tag ]; then mkdir -p &amp;quot;$1/opt/wkstnctl/&amp;quot; cp -R /tmp/tag &amp;quot;$1/opt/wkstnctl/&amp;quot; fi [/code] This simply confirms that the tag directory exists as a directory and then makes the final destination and copies the tag directory to it. This uses the $1 variable available in Casper Imaging to reference the target volume. The system reboots and any packages that need to be installed while booted from the &amp;ldquo;real&amp;rdquo; OS run. Then lastly, our third script runs. This is named zBuildComplete.sh (so it is last) and is set to run on reboot. [code language=&amp;ldquo;bash&amp;rdquo;] #!/bin/sh # Capture when build is complete timezoneoffset=$(cat /Volumes/Macintosh\ HD/opt/wkstnctl/tag/TimeZoneOffset.txt) case &amp;quot;$timezoneoffset&amp;quot; in -0300) starttz=-3 ;; -0400) starttz=-4 ;; -0500) starttz=-5 ;; -600) starttz=-6 ;; -0700) starttz=-7 ;; -0800) starttz=-8 ;; -0900) starttz=-9 ;; -1000) starttz=-10 ;; esac currenttimezoneoffset=$(date +&amp;quot;%z&amp;quot;) case &amp;quot;$currenttimezoneoffset&amp;quot; in -0300) endtz=-3 ;; -0400) endtz=-4 ;; -0500) endtz=-5 ;; -600) endtz=-6 ;; -0700) endtz=-7 ;; -0800) endtz=-8 ;; -0900) endtz=-9 ;; -1000) endtz=-10 ;; sac difference=$(expr $starttz - $endtz) if [ $difference -eq 0 ]; then completionDate=$(date +&amp;quot;%D %H:%M&amp;quot;) elif [ $difference -gt 0 ]; then completionDate=$(date -v &amp;quot;+${difference}H&amp;quot; +&amp;quot;%D %H:%M&amp;quot;) else completionDate=$(date -v &amp;quot;${difference}H&amp;quot; +&amp;quot;%D %H:%M&amp;quot;) fi echo &amp;quot;$completionDate&amp;quot; &amp;gt; /Volumes/Macintosh\ HD/opt/wkstnctl/tag/BuildComplete.txt [/code] This one is a bit messy. First I read the offset stored from the start and use a case statement to convert it to an integer. Then get the current time zone offset and do the same. Now I can calculate the difference between the two. Then I use that difference to generate a build completion time based on the current time. The date command takes a -v option to adjust the time, but that option needs to have the sign of the change explicit. So there is an if statement to format it properly. If the difference is 0, don&amp;rsquo;t use an adjustment, if the difference is positive, print + then the value, else print the value, which will include the - sign. Once that has all been sorted out, store the completion time in our tags.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
