<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automator on My Thoughts</title>
    <link>http://localhost:1313/tags/automator/</link>
    <description>Recent content in Automator on My Thoughts</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Eric Hemmeter</copyright>
    <lastBuildDate>Mon, 26 Mar 2018 13:07:22 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/automator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Folder in List View</title>
      <link>http://localhost:1313/posts/new-folder-in-list-view-comments/</link>
      <pubDate>Mon, 26 Mar 2018 13:07:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/new-folder-in-list-view-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%22anthonymolina62@yahoo.com%22&#34;&gt;Anthony&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;May 3, 2020&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Found your page on a web search. Exactly what I was looking for, it&amp;rsquo;s awesome. Thank you !&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Hey thanks for this. Works like a charm! Why Apple does not have something like this built-in is beyond me.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;This is soooooooooo helpful! Thanx&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>New Folder in List View</title>
      <link>http://localhost:1313/posts/new-folder-in-list-view/</link>
      <pubDate>Mon, 26 Mar 2018 13:07:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/new-folder-in-list-view/</guid>
      <description>&lt;p&gt;I often use List View in the Finder for the directory where I organize all my packages.  There doesn&amp;rsquo;t seem to be any way to create a folder within the highlighted folder below.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/03/screen-shot-2018-03-23-at-4-48-33-pm.png&#34; alt=&#34;Screen Shot 2018-03-23 at 4.48.33 PM.png&#34;&gt; In this post I will show how we can create that option.  Right-click/Control-click doesn&amp;rsquo;t have a New Folder option in this view.  The File menu/Action menu/keyboard shortcut for New Folder makes a the new folder in the folder that is at the root of the window.  That doesn&amp;rsquo;t work for me since there are so many folders in this directory that I lose my place. We can use AppleScript to make a new folder and Automator to make it a Service that will be available in the right-click menu.  Open Automator and choose to make a New Document and Choose to make it a Service.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/03/screen-shot-2018-03-23-at-4-56-03-pm.png&#34; alt=&#34;Screen Shot 2018-03-23 at 4.56.03 PM.png&#34;&gt; Then search on the left for Run.  Drag a Run AppleScript action into the workflow on the right.  Then change the dropdowns to &amp;ldquo;Service receives selected folders in Finder&amp;rdquo;&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/03/screen-shot-2018-03-23-at-4-58-57-pm.png&#34; alt=&#34;Screen Shot 2018-03-23 at 4.58.57 PM.png&#34;&gt; The AppleScript block will be passed the folder we have selected in the Finder as &lt;code&gt;input&lt;/code&gt;.  We can use that to know where to make our new folder.  We could just use:&lt;code&gt;tell application &amp;quot;Finder&amp;quot; make new folder at input end tell&lt;/code&gt;to make a new folder, but then we have to rename it.  Since we are already using AppleScript, I decided to prompt for the name up front.  So my final AppleScript looks like```&#xA;on run {input, parameters}&#xA;set folderNameDialog to display dialog &amp;ldquo;Enter the folder name:&amp;rdquo; default answer &amp;quot;&amp;quot; buttons {&amp;ldquo;OK&amp;rdquo;} default button &amp;ldquo;OK&amp;rdquo;&#xA;set folderName to text returned of folderNameDialog&#xA;tell application &amp;ldquo;Finder&amp;rdquo;&#xA;make new folder at input with properties {name:folderName}&#xA;end tell&#xA;return input&#xA;end run&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automator application to run script as root</title>
      <link>http://localhost:1313/posts/automator-application-to-run-script-as-root-comments/</link>
      <pubDate>Tue, 12 Dec 2017 15:36:31 +0000</pubDate>
      <guid>http://localhost:1313/posts/automator-application-to-run-script-as-root-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://rayleighwickfordlabour.org.uk&#34; title=&#34;n.martin@rayleighwickfordlabour.org.uk&#34;&gt;n.martin&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Dec 2, 2017&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Heyas - it looks like you might be using Jamf from the last screenshot (jamfhelper?). If you&amp;rsquo;re running Jamf Pro 10, you could put the installer policy in Self Service and get a URL that opens Self Service and runs that policy automatically: &lt;a href=&#34;http://docs.jamf.com/10.0.0/jamf-pro/administrator-guide/Making&#34;&gt;http://docs.jamf.com/10.0.0/jamf-pro/administrator-guide/Making&lt;/a&gt;_Items_Available_to_Users_in_Jamf_Self_Service_for_macOS.html There&amp;rsquo;s a section on that page; Item URLs An AppleScript with: do shell script &amp;ldquo;open &amp;quot; might work (haven&amp;rsquo;t tested but would be really interested).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automator application to run script as root</title>
      <link>http://localhost:1313/posts/automator-application-to-run-script-as-root/</link>
      <pubDate>Tue, 12 Dec 2017 15:36:31 +0000</pubDate>
      <guid>http://localhost:1313/posts/automator-application-to-run-script-as-root/</guid>
      <description>&lt;p&gt;I was recently asked to create a shortcut on our users&amp;rsquo; Desktops to kick off the High Sierra install. We are caching the installer through our management system. In the past I have created a shortcut to the installer on their Desktop, but that required them to click through the many continue buttons. This method will use the startosinstall script from &lt;a href=&#34;https://github.com/bp88/JSS-Scripts/blob/master/OS_Upgrade.sh&#34;&gt;Slack member @bp&lt;/a&gt; to start the install with minimal user interaction. I wrap that shell script (with the appropriate modifications for my environment) in an Automator application, but to have the script run as root, I call it with Run AppleScript using the &lt;code&gt;do shell script ... with administrator privileges&lt;/code&gt; form. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2017/12/automatorinstaller.png&#34; alt=&#34;AutomatorInstaller.png&#34;&gt; The full AppleScript is&lt;/p&gt;</description>
    </item>
    <item>
      <title>Signing Installer Packages with Automator</title>
      <link>http://localhost:1313/posts/signing-installer-packages-with-automator-comments/</link>
      <pubDate>Sat, 05 Nov 2016 01:51:33 +0000</pubDate>
      <guid>http://localhost:1313/posts/signing-installer-packages-with-automator-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%22developers@buildtestrun.com%22&#34;&gt;mbonne&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Apr 5, 2019&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;+1 automation services levelled up&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[…] is created, drag it to the Post-installation well, save your package, and build it. I then sign my packages with a certificate from my company’s Apple developer […]&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Signing Installer Packages with Automator</title>
      <link>http://localhost:1313/posts/signing-installer-packages-with-automator/</link>
      <pubDate>Sat, 05 Nov 2016 01:51:33 +0000</pubDate>
      <guid>http://localhost:1313/posts/signing-installer-packages-with-automator/</guid>
      <description>&lt;p&gt;Apple packages (.pkgs) are opened by the GUI Installer.app or the command line installer command. If a package is unsigned and gets a quarantine flag (from being transferred over a network), the GUI Installer will refuse to run it.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-07-35-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.07.35 PM.png&#34;&gt; We can get around that with a right-click -&amp;gt; Open, but we shouldn&amp;rsquo;t be training computer users to ignore security warnings like this. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-04-at-4-49-33-pm.png&#34; alt=&#34;Screen Shot 2016-11-04 at 4.49.33 PM.png&#34;&gt; If you are creating your own packages, and users or techs may run them manually, then you really should be signing them. Even if you are deploying them in a way that a person won&amp;rsquo;t see a warning, signing packages can be very easy and provide a check that nothing changed since you created it. See below the break for how to easily automate signing packages. I use &lt;a href=&#34;http://s.sudre.free.fr/Software/Packages/about.html&#34;&gt;WhiteBox Packages&lt;/a&gt; to create most of my packages. It has a built in feature to sign packages it builds, but recent versions have had some problems with it and when it works it still has to be set per package project. The Apple provided tool to sign our packages is &lt;code&gt;productsign&lt;/code&gt;. This works, but to make things easier on myself, I have wrapped that up in an Automator application that I can use as a droplet. The basic format for using productsign is &lt;code&gt;productsign [options] --sign identity input-product-path output-product-path&lt;/code&gt; Interestingly, the man page for productsign doesn&amp;rsquo;t show any available options. So next we want to &lt;code&gt;--sign&lt;/code&gt; using &lt;code&gt;identity&lt;/code&gt;. This is our Developer ID Installer certificate from Apple&amp;rsquo;s developer program. This does require a paid membership, but if you work for an organization supporting Macs, there is plenty of benefit to offset the $99 or $399/year (signing identities, early access to OS builds for testing, etc). To sign packages we need a Developer ID Installer (see &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW6&#34;&gt;Apple&amp;rsquo;s documentation&lt;/a&gt;) Once you have your Dev ID Installer certificate installed in your keychain, then we can get the appropriate reference for it. Open /Applications/Utilities/Keychain Access. Search for Developer ID and select the appropriate certificate. Then you can highlight and copy the name.  If you are a part of more than one developer program, select the &amp;ldquo;right&amp;rdquo; one here.  You can create several Automator applications if you want to have one for each ID.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-25-14-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.25.14 PM.png&#34;&gt; So now we can write our command &lt;code&gt;productsign --sign &#39;Developer ID Installer: OrgName (Code)&#39; in_pkg out_pkg&lt;/code&gt;. For example &lt;code&gt;productsign --sign &#39;Developer ID Installer: OrgName (Code)&#39; ~/Development/Unsigned.pkg ~/Development/Signed.pkg&lt;/code&gt;. This will prompt to allow productsign access to your keychain. Say Allow or Always Allow.&lt;code&gt;$ productsign --sign &#39;Developer ID Installer: OrgName (Code)&#39; ~/Desktop/Unsigned/build/Unsigned.pkg ~/Desktop/Unsigned/build/Signed.pkg productsign: using timestamp authority for signature productsign: signing product with identity &amp;quot;Developer ID Installer: OrgName (Code)&amp;quot; from keychain /Users/username/Library/Keychains/login.keychain-db productsign: adding certificate &amp;quot;Developer ID Certification Authority&amp;quot; productsign: adding certificate &amp;quot;Apple Root CA&amp;quot; productsign: Wrote signed product archive to /Users/username/Desktop/Unsigned/build/Signed.pkg&lt;/code&gt;Now when we run the installer by double clicking it, the installer opens. Notice the lock in the upper right corner. Click the clock and we can examine the certificate chain back to Apple&amp;rsquo;s Root.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-29-14-pm1.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.29.14 PM.png&#34;&gt; The idea when we started was to make this easy to do since we might need to sign a lot of packages over time. To automate this, open /Applications/Automator.app. Choose to create a New Document. Then choose Application for the type and click Choose.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-31-43-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.31.43 PM.png&#34;&gt; Search for shell in the Actions name search field. Drag a run shell script action to the workflow.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-32-11-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.32.11 PM.png&#34;&gt; First adjust the Pass input: pop up to as arguments.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-33-00-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.33.00 PM.png&#34;&gt; That will fill in the template for us. Then enter our productsign command with some slight differences. The &lt;code&gt;--sign&lt;/code&gt; and &lt;code&gt;identity&lt;/code&gt; will be the same, but now for the input and output, we need to make this work with whatever is dropped on the application. The packages will be passed as arguments and the for loop will work on each one in turn. These will be assigned to the pkg variable, so that becomes our input file. Then for the output, I settled on packagename.signed.pkg to differentiate the output from the input. This &lt;code&gt;$(sed &#39;s/.pkg$/.signed.pkg/g&#39; &amp;lt;&amp;lt;&amp;lt; $pkg)&lt;/code&gt; will find the last &amp;lsquo;.pkg&amp;rsquo; in the filename and replace it with &amp;lsquo;.signed.pkg&amp;rsquo;, while keeping the name portion the same (see note at the end for how this works) .  Notice I also changed the &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;pkg&lt;/code&gt; just to make it clear what the variable represents.```&#xA;for pkg in &amp;ldquo;$@&amp;rdquo;&#xA;do&#xA;productsign &amp;ndash;sign &amp;lsquo;Developer ID Installer: OrgName (Code)&amp;rsquo; &amp;ldquo;$pkg&amp;rdquo; &amp;ldquo;$(sed &amp;rsquo;s/.pkg$/.signed.pkg/g&amp;rsquo; &amp;laquo;&amp;lt; $pkg)&amp;rdquo;&#xA;done&lt;/p&gt;</description>
    </item>
    <item>
      <title>Get the path of file onto the clipboard</title>
      <link>http://localhost:1313/posts/get-the-path-of-file-onto-the-clipboard-comments/</link>
      <pubDate>Wed, 06 Nov 2013 03:37:51 +0000</pubDate>
      <guid>http://localhost:1313/posts/get-the-path-of-file-onto-the-clipboard-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.sutocom.net&#34; title=&#34;dennes777@gmail.com&#34;&gt;SutoCom&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Nov 4, 2013&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Reblogged this on &lt;a href=&#34;http://sutocom.net/2013/11/07/get-the-path-of-file-onto-the-clipboard/&#34;&gt;Sutoprise Avenue, A SutoCom Source&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Get the path of file onto the clipboard</title>
      <link>http://localhost:1313/posts/get-the-path-of-file-onto-the-clipboard/</link>
      <pubDate>Wed, 06 Nov 2013 03:37:51 +0000</pubDate>
      <guid>http://localhost:1313/posts/get-the-path-of-file-onto-the-clipboard/</guid>
      <description>&lt;p&gt;I find myself needing the path to a file relatively frequently to add to an email or documentation.  I added a service to the Finder contextual menu to get the path to the selected item.  This service notifies me with an alert (just for fun) and can be invoked with a keyboard shortcut.  This was done in Mavericks (10.9).  Most of it should work in 10.8 or 10.7 (except the notification). To start, open Automator (/Applications/Automator.app) and choose to make a New Document. When prompted, select to create a Service and click Choose. &lt;a href=&#34;http://sneakypockets.wordpress.com/wp-content/uploads/2013/11/screen-shot-2013-11-05-at-9-12-00-pm.png&#34;&gt;&lt;img src=&#34;http://sneakypockets.wordpress.com/wp-content/uploads/2013/11/screen-shot-2013-11-05-at-9-12-00-pm.png?w=300&#34; alt=&#34;Screen Shot 2013-11-05 at 9.12.00 PM&#34;&gt;&lt;/a&gt; This will create a new workflow that takes the selected items as input.  Change the &amp;ldquo;Service receives selected&amp;rdquo; menu to say &amp;ldquo;Files or Folders&amp;rdquo; and change &amp;ldquo;any application&amp;rdquo; to be &amp;ldquo;Finder&amp;rdquo;. Then we need to add the appropriate actions. First we need to get the actual path to the selected item. There isn&amp;rsquo;t an action to do this exactly, so add the Run AppleScript action.  Replace &amp;ldquo;(* Your script goes here *)&amp;rdquo; with:```&#xA;&lt;strong&gt;tell&lt;/strong&gt; &lt;em&gt;application&lt;/em&gt; &amp;ldquo;Finder&amp;rdquo;&#xA;&lt;strong&gt;return&lt;/strong&gt; POSIX path &lt;strong&gt;of&lt;/strong&gt; input&#xA;&lt;strong&gt;end&lt;/strong&gt; &lt;strong&gt;tell&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
