<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on My Thoughts</title>
    <link>http://localhost:1313/tags/uncategorized/</link>
    <description>Recent content in Uncategorized on My Thoughts</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Eric Hemmeter</copyright>
    <lastBuildDate>Tue, 20 Dec 2022 21:15:59 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/uncategorized/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Moving to Mastodon and that other blog</title>
      <link>http://localhost:1313/posts/moving-to-mastodon-and-that-other-blog/</link>
      <pubDate>Tue, 20 Dec 2022 21:15:59 +0000</pubDate>
      <guid>http://localhost:1313/posts/moving-to-mastodon-and-that-other-blog/</guid>
      <description>&lt;p&gt;Like many others I&amp;rsquo;m fed up with what is going on at Twitter and closed my account. I was never much of a poster, but I did like keeping up with news (primarily #macadmin) there. So I&amp;rsquo;ve moved to Mastodon. Turns out I had created an account on mastodon.social a few years ago, so I am now &lt;a href=&#34;https://mastodon.social/@ehemmete&#34;&gt;over there&lt;/a&gt; for my social media needs.&lt;/p&gt;&#xA;&lt;p&gt;Also I don&amp;rsquo;t post here much anymore. Anything I do for work goes to the &lt;a href=&#34;https://www.rskgroup.org/blog/&#34;&gt;RSKGroup blog&lt;/a&gt; and that takes most of my blogging time/energy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Change the FileVault login background in Mojave</title>
      <link>http://localhost:1313/posts/change-the-filevault-login-background-in-mojave-comments/</link>
      <pubDate>Thu, 30 May 2019 20:36:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/change-the-filevault-login-background-in-mojave-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%22ingx@thinkingx.de%22&#34;&gt;ingx&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Sep 4, 2019&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Dunno why nobody comments on this. Thx a lot! Everbody &amp;ldquo;talks&amp;rdquo; about this problem, but it seems nearly nobody in the &amp;ldquo;mac universe&amp;rdquo; understands what the problem is with activated fileVault and changing the initial login Screen by changing the default mojave picture with a personal one. It works after unlocking fileVault, but not before. Updating the preboot routine helped! Thx a lot again!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Change the FileVault login background in Mojave</title>
      <link>http://localhost:1313/posts/change-the-filevault-login-background-in-mojave/</link>
      <pubDate>Thu, 30 May 2019 20:36:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/change-the-filevault-login-background-in-mojave/</guid>
      <description>&lt;p&gt;There are sites on the internet about changing the Mojave login window background, but nothing I found for when FileVault is enabled.  I think I found a solution. For the login window, the &amp;ldquo;trick&amp;rdquo; is to swap out /Library/Desktop Pictures/Mojave.heic with your image.  It must be the same name and format.  Preview on Mojave can help with converting your image to .heic format. Then to get FileVault to use it, we update the preboot environment/partition with [code]diskutil apfs updatePreboot /[/code] Restart and you should see your custom background. Apple may very well &amp;ldquo;fix&amp;rdquo; this with a/every software update and set it back, but if you really want to brand that screen it is possible for now.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automating making bootable macOS installer dmgs</title>
      <link>http://localhost:1313/posts/automating-making-bootable-macos-installer-dmgs-comments/</link>
      <pubDate>Fri, 21 Sep 2018 20:04:56 +0000</pubDate>
      <guid>http://localhost:1313/posts/automating-making-bootable-macos-installer-dmgs-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://macvfx.wordpress.com&#34; title=&#34;mat@matx.ca&#34;&gt;macvfx&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Sep 5, 2018&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Minor typo: &amp;quot; Instead of manually make&amp;quot;&amp;hellip; I think you meant to say: &amp;quot; Instead of manually _making_&amp;quot;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Thank you! Fixed.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;Thanks again for creating this. Works with 10.13 and 10,14 dmg supplied by installinstallmacos.py that I tested.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Automating making bootable macOS installer dmgs</title>
      <link>http://localhost:1313/posts/automating-making-bootable-macos-installer-dmgs/</link>
      <pubDate>Fri, 21 Sep 2018 20:04:56 +0000</pubDate>
      <guid>http://localhost:1313/posts/automating-making-bootable-macos-installer-dmgs/</guid>
      <description>&lt;p&gt;macOS Mojave should be released on Mon (9/24). At my employer, we will not be ready to support it yet as we are waiting for a couple of vendors to update their products. So we will need to be able to build High Sierra Macs without relying on Internet Recovery for erasing and reinstalling macOS. To make things more confusing, macOS High Sierra doesn&amp;rsquo;t have a unified installer for all models. Most use 17G65, but the 2018 MacBook Pros need 17G2208. Both can be downloaded today (before Mojave comes out) with &lt;a href=&#34;https://github.com/munki/macadmin-scripts/blob/master/installinstallmacos.py&#34;&gt;installinstallmacos.py&lt;/a&gt;.  Instead of manually making USB drives with createinstallmedia for both and then making dmgs to distribute to our deskside team across the country, I wanted to automate this process. I wrote a script that takes the output of installinstallmacos.py as input, creates an empty writable disk image, uses the createinstallmedia command to make the new disk image a bootable macOS installer, converts the installer dmg to compressed, and scans it for restore.  I have tested it with both High Sierra and Mojave installers. See &lt;a href=&#34;https://github.com/ehemmete/makeBootableInstaller&#34;&gt;makeBootableInstaller&lt;/a&gt; for the script and details. The way to use it is to first use installinstallmacos.py to download the version and build you need.  Then run:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Approve UAMDM and repush KEXT Profile</title>
      <link>http://localhost:1313/posts/approve-uamdm-and-repush-kext-profile/</link>
      <pubDate>Wed, 23 May 2018 15:52:57 +0000</pubDate>
      <guid>http://localhost:1313/posts/approve-uamdm-and-repush-kext-profile/</guid>
      <description>&lt;p&gt;I recently came across a way to have our JAMF JSS resend a failed KEXT whitelist policy triggered from the client end (&lt;a href=&#34;https://sneakypockets.wordpress.com/2018/05/21/retry-a-failed-profile-from-a-client/&#34;&gt;Retry a failed Profile from a client&lt;/a&gt;).  At that point I wasn&amp;rsquo;t sure how I wanted to deploy it during our provisioning process.  I now have a plan to prompt for UAMDM approval and then automatically resend the KEXT profile.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash#!/bin/bash&#xA;while ! $(profiles status -type enrollment | grep -q &amp;#34;User Approved&amp;#34;); do &#xA; open /System/Library/PreferencePanes/Profiles.prefPane&#xA; sleep 10&#xA;done&#xA;curl -sku &amp;#34;$apiuser&amp;#34;:&amp;#34;$apipass&amp;#34; -H &amp;#34;Content-Type: application/xml&amp;#34; -d &amp;#34;&amp;lt;os\_x\_configuration\_profile&amp;gt;&amp;lt;general&amp;gt;&amp;lt;redeploy\_on\_update&amp;gt;Newly Assigned&amp;lt;/redeploy\_on\_update&amp;gt;&amp;lt;/general&amp;gt;&amp;lt;/os\_x\_configuration\_profile&amp;gt;&amp;#34; &amp;#34;$jssurl&amp;#34;/JSSResource/osxconfigurationprofiles/id/$id -X PUT&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;You will need to supply the username, password, url, and the id number of your Kext profile in your script. I install this script as a login-once action for &lt;a href=&#34;https://github.com/chilcote/outset&#34;&gt;Outset&lt;/a&gt;.  When the user or tech provisioning the Mac signs in after JAMF Imaging is complete, they will see warnings for unapproved kernel extensions.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/05/screen-shot-2018-03-27-at-9-42-45-am.png&#34; alt=&#34;Screen Shot 2018-03-27 at 9.42.45 AM.png&#34;&gt; But once the script runs, System Preferences will open to the Profiles pane and keep opening if the user closes it.  Once they approve the MDM Profile, the script triggers the JSS to resend the KEXT profile, which some applications notice immediately.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/05/screen-shot-2018-03-27-at-9-44-22-am.png&#34; alt=&#34;Screen Shot 2018-03-27 at 9.44.22 AM.png&#34;&gt; I may add a JAMF helper dialog explaining what to do and will probably add an OS version check as the profiles status line only works in 10.13.4 and above. Thanks to Rich Trouton for &lt;a href=&#34;https://derflounder.wordpress.com/2018/03/30/detecting-user-approved-mdm-using-the-profiles-command-line-tool-on-macos-10-13-4/&#34;&gt;a method to check for UAMDM&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retry a failed Profile from a client</title>
      <link>http://localhost:1313/posts/retry-a-failed-profile-from-a-client-comments/</link>
      <pubDate>Mon, 21 May 2018 21:09:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/retry-a-failed-profile-from-a-client-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sneakypockets.wordpress.com/2018/05/23/approve-uamdm-and-repush-kext-profile/&#34; title=&#34;&#34;&gt;Approve UAMDM and repush KEXT Profile | My Thoughts&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;May 3, 2018&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;[…] a way to have our JAMF JSS resend a failed KEXT whitelist policy triggered from the client end (Retry a failed Profile from a client).  At that point I wasn’t sure how I wanted to deploy it during our provisioning process. […]&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Retry a failed Profile from a client</title>
      <link>http://localhost:1313/posts/retry-a-failed-profile-from-a-client/</link>
      <pubDate>Mon, 21 May 2018 21:09:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/retry-a-failed-profile-from-a-client/</guid>
      <description>&lt;p&gt;My organization is working on moving to a DEP based workflow, but in the meantime we are getting computers that have 10.13.4 preinstalled on them. We use JAMF Imaging along with the Apple provided OS to put our software on the Mac and enroll it into our JAMF JSS. After the build process the user can log in, but in 10.13.4 they are shown unapproved kernel extension warnings because our MDM Profile is not yet approved. Once they approve the MDM Profile, our KEXT Whitelist still needs to be pushed again. I can manually do this from the JAMF console by choosing to edit the profile, then save it immediately. When prompted, I have it push to newly assigned clients only and it doesn&amp;rsquo;t bother the several hundred that already have it. I recently figured out how to prompt for this from the client end with the JAMF API. Each JAMF configuration profile (osxconfigurationprofiles in API terms) has a redploy_on_update key that can take a value of Newly Assigned. Using the API to PUT this value seems to trigger the same behaviour as the edit/save/assign to new devices process. So now from the client (or Self Service) I can trigger the KEXT profile repush as needed while still not touching all the devices that are already happy. The API call looks like:&lt;code&gt;curl -sku &amp;quot;$apiUser&amp;quot;:&amp;quot;$apiPass&amp;quot; -H &amp;quot;Content-Type: application/xml&amp;quot; -d &amp;quot;&amp;lt;os\_x\_configuration\_profile&amp;gt;&amp;lt;general&amp;gt;&amp;lt;redeploy\_on\_update&amp;gt;Newly Assigned&amp;lt;/redeploy\_on\_update&amp;gt;&amp;lt;/general&amp;gt;&amp;lt;/os\_x\_configuration\_profile&amp;gt;&amp;quot; https://jss.company.com:8443/JSSResource/osxconfigurationprofiles/id/&amp;quot;$id&amp;quot; -X PUT&lt;/code&gt;For the API user, I created a new local JSS account that has Update privileges for macOS Configuration Profiles (note the difference between the API and the GUI). See &lt;a href=&#34;https://www.rderewianko.com/hardcoding_is_bad/&#34;&gt;https://www.rderewianko.com/hardcoding_is_bad/&lt;/a&gt; for some good ideas on passing the username/password/JSS name in a script. Lastly we need the id of the configuration profile we want to repush. This can found in the URL of the profile in the web GUI or via the API. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/05/screen-shot-2018-05-21-at-3-28-16-pm.png&#34; alt=&#34;Screen Shot 2018-05-21 at 3.28.16 PM.png&#34;&gt; or &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/05/screen-shot-2018-05-21-at-3-28-52-pm.png&#34; alt=&#34;Screen Shot 2018-05-21 at 3.28.52 PM.png&#34;&gt; or```&#xA;curl -sku &amp;ldquo;$apiUser&amp;rdquo;:&amp;quot;$apiPass&amp;quot; &lt;a href=&#34;https://jss.company.com:8443/JSSResource/osxconfigurationprofiles&#34;&gt;https://jss.company.com:8443/JSSResource/osxconfigurationprofiles&lt;/a&gt; -X GET&lt;/p&gt;</description>
    </item>
    <item>
      <title>FileCruiser - Where are my files?</title>
      <link>http://localhost:1313/posts/filecruiser-where-are-my-files/</link>
      <pubDate>Wed, 10 Feb 2016 16:18:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/filecruiser-where-are-my-files/</guid>
      <description>&lt;p&gt;We are testing a 90-day trial of Promise&amp;rsquo;s &lt;a href=&#34;http://www.promise.com/us/Products/FileCruiser&#34;&gt;FileCruiser&lt;/a&gt;.  It is a private Dropbox look-a-like.  We have been pretty happy with how it works and the performance.  One tricky part is occasionally I have had to try to find the files in the filesystem. If you need to find the data in FileCruiser, it is stored in folders named by a UUID number in &lt;code&gt;/mnt/UserData/MongaStorage/tenants/&amp;lt;UUID&amp;gt;/home/.&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Network Services and IPs</title>
      <link>http://localhost:1313/posts/network-services-and-ips-comments/</link>
      <pubDate>Sat, 30 Aug 2014 22:47:32 +0000</pubDate>
      <guid>http://localhost:1313/posts/network-services-and-ips-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sneakypockets.wordpress.com/2015/05/05/update-to-network-geektool-script/&#34; title=&#34;&#34;&gt;Update to network GeekTool script | My Thoughts&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;May 2, 2015&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;I have updated this script to be a bit more efficient and stop spamming my logs. See the new version: &lt;a href=&#34;https://sneakypockets.wordpress.com/2015/05/05/update-to-network-geektool-script/&#34;&gt;https://sneakypockets.wordpress.com/2015/05/05/update-to-network-geektool-script/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Network Services and IPs</title>
      <link>http://localhost:1313/posts/network-services-and-ips/</link>
      <pubDate>Sat, 30 Aug 2014 22:47:32 +0000</pubDate>
      <guid>http://localhost:1313/posts/network-services-and-ips/</guid>
      <description>&lt;p&gt;I have long had a &lt;a href=&#34;http://projects.tynsoe.org/en/geektool/&#34; title=&#34;GeekTool&#34;&gt;GeekTool&lt;/a&gt; item on my desktop that tells me what network interfaces were active and what IPs I have on them, as well as my external IP address.  For a long time this relied on ifconfig and manually updating the interface numbers (en0, en1, etc&amp;hellip;).  Now that I have a Retina MBP, without an ethernet port, I have a lot of possible interfaces with the various adapters.  Managing the script manually was getting annoying.  So I rewrote it to use networksetup and a while loop.  The script is below: [code language=&amp;ldquo;bash&amp;rdquo;]#! /bin/bash connection=false services=$(networksetup -listallnetworkservices) while read service; do ip=$(networksetup -getinfo &amp;ldquo;$service&amp;rdquo; | grep &amp;ldquo;IP address&amp;rdquo; | grep -v &amp;ldquo;IPv6&amp;rdquo; | awk &amp;lsquo;{print $3}&amp;rsquo;) if [ &amp;ldquo;$ip&amp;rdquo; != &amp;quot;&amp;quot; ]; then echo &amp;ldquo;$service : $ip&amp;rdquo; connection=true fi done &amp;lt;&amp;lt;&amp;lt;&amp;quot;$services&amp;quot; astatus=$(networksetup -getinfo &amp;ldquo;Wi-Fi&amp;rdquo; | grep &amp;ldquo;IP address&amp;rdquo; | grep -v &amp;ldquo;IPv6&amp;rdquo; | awk &amp;lsquo;{print $3}&amp;rsquo;) if [ &amp;ldquo;$astatus&amp;rdquo; != &amp;quot;&amp;quot; ]; then NetName=`system_profiler SPAirPortDataType | awk &amp;lsquo;/Current Network Information:/ { found=NR } found &amp;amp;&amp;amp; NR==found+1&amp;rsquo; | awk &amp;lsquo;{$1=$1};1&amp;rsquo; | cut -d&amp;quot;:&amp;quot; -f1` Channel=`system_profiler SPAirPortDataType | awk &amp;lsquo;/Current Network Information:/ { found=NR } found &amp;amp;&amp;amp; NR==found+4&amp;rsquo; | awk &amp;lsquo;{$1=$1};1&amp;rsquo; | sed &amp;rsquo;s/Channel/Ch/g&amp;rsquo;` echo &amp;ldquo;$NetName / $Channel&amp;rdquo; fi if [ $connection = false ]; then echo &amp;ldquo;No Connected Services&amp;rdquo; else extIP=$(curl -s &lt;a href=&#34;http://checkip.dyndns.org/&#34;&gt;http://checkip.dyndns.org/&lt;/a&gt; | sed &amp;rsquo;s/[a-zA-Z&amp;lt;&amp;gt;/ :]//g&amp;rsquo;) if [ &amp;ldquo;$extIP&amp;rdquo; != &amp;quot;&amp;quot; ]; then echo &amp;ldquo;External IP: $extIP&amp;rdquo; else echo &amp;ldquo;No External Connection&amp;rdquo; fi fi [/code] The first line gets a list of all network services as defined in the current location in the Network panel of System Preferences, as well as a few other options (bluetooth, usb attached MiFis, etc).  Then for each one of those, we try to look up an IP address.  If there isn&amp;rsquo;t an IP, nothing is displayed, but if there is, then the service name and IP are output. If the Wi-Fi service has an IP address, then the network name and channel that the system is connected to is found and output. Finally, we use a external website to lookup the public IP that our outside connection is from. [Edit] I added some checking so that if there is no connection, it will display that.  Also it will now display if there is no external connection [/Edit] Currently, this is all for IPv4 addresses, and I explicitly exclude any IPv6 addresses that might be assigned, but that could be modified by changing the grep portions of the script. Then in GeekTool I setup a Shell Script item and point it to my script.  That looks like this: &lt;a href=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2014/08/geektool-config.png&#34;&gt;&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2014/08/geektool-config.png?w=132&#34; alt=&#34;GeekTool config&#34;&gt;&lt;/a&gt; The output then is positioned in the lower left hand corner of my screen and looks like: &lt;a href=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2014/08/geektool-output1.png&#34;&gt;&lt;img src=&#34;http://sneakypockets.wordpress.com/wp-content/uploads/2014/08/geektool-output1.png?w=300&#34; alt=&#34;GeekTool output&#34;&gt;&lt;/a&gt; The next step is to use this as an excuse to try out &lt;a href=&#34;http://tracesof.net/uebersicht/&#34;&gt;Übersicht&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
