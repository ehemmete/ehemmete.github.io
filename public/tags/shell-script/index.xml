<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell Script on My Thoughts</title>
    <link>http://localhost:1313/tags/shell-script/</link>
    <description>Recent content in Shell Script on My Thoughts</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Eric Hemmeter</copyright>
    <lastBuildDate>Tue, 17 Mar 2020 18:46:06 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/shell-script/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a wrapper package for a choices.xml file</title>
      <link>http://localhost:1313/posts/creating-a-wrapper-package-for-a-choices-xml-file-comments/</link>
      <pubDate>Tue, 17 Mar 2020 18:46:06 +0000</pubDate>
      <guid>http://localhost:1313/posts/creating-a-wrapper-package-for-a-choices-xml-file-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://azurecloudsujithcy.wordpress.com&#34; title=&#34;sujith.cy@gmail.com&#34;&gt;azureessentials&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Mar 0, 2022&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Thanks for writing this article and it is really helpful. I am trying to distribute ciscoanyconnect app to our Intune managed mac devices. The cisco package we have includes all components like posture, AMP, websecurity etc. I&amp;rsquo;d like to exclude all of them except VPN using choice.xml. I followed your post and after I built the package it fails to run. I suspect there is some issue with the postinstall script. please assist me here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating a wrapper package for a choices.xml file</title>
      <link>http://localhost:1313/posts/creating-a-wrapper-package-for-a-choices-xml-file/</link>
      <pubDate>Tue, 17 Mar 2020 18:46:06 +0000</pubDate>
      <guid>http://localhost:1313/posts/creating-a-wrapper-package-for-a-choices-xml-file/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://sneakypockets.wordpress.com/2017/07/26/using-installer-choices-xml-to-modify-anyconnect-and-mcafee-deployments/&#34;&gt;previous article&lt;/a&gt;, I discussed creating a choices.xml file to control what gets installed by a vendor package.  I briefly touched on how to use the choices.xml file, but don&amp;rsquo;t give much detail.  In this post, I will spell out how to put the vendor package and choices.xml file in a wrapper package for deployment through anything that handles packages. For my example, I will be using Cisco&amp;rsquo;s AnyConnect 4.8 package and a choices.xml file to only install the VPN portion.  Using &lt;a href=&#34;http://s.sudre.free.fr/Software/Packages/about.html&#34;&gt;Stéphane Sudre&amp;rsquo;s Packages&lt;/a&gt; application, create a new raw package project. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2020/03/screen-shot-2020-03-17-at-12.38.06-pm.png&#34; alt=&#34;Screen Shot 2020-03-17 at 12.38.06 PM&#34;&gt; Give it a useful name and decide where to save the project. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2020/03/screen-shot-2020-03-17-at-12.38.24-pm.png&#34; alt=&#34;Screen Shot 2020-03-17 at 12.38.24 PM&#34;&gt;You can set Settings how you like, but the defaults generally work for what we are doing. Everything in this exercise will be in the Scripts tab. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2020/03/screen-shot-2020-03-17-at-12.58.09-pm.png&#34; alt=&#34;Screen Shot 2020-03-17 at 12.58.09 PM&#34;&gt;Drag the AnyConnect.pkg and your choices.xml to the Additional Resources area.  You can name your xml file anything you want.  For example, I have choicesForAnyConnectVPN.xml and choicesForAnyConnectUmbrella.xml for 2 different package projects.  For AnyConnect, I also want to install our vpn configuration, so I add a Profiles folder with the vpn folder and the configuration in there. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2020/03/screen-shot-2020-03-17-at-12.57.51-pm.png&#34; alt=&#34;Screen Shot 2020-03-17 at 12.57.51 PM&#34;&gt; My company&amp;rsquo;s VPN requires a certificate, so that is added as well.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2020/03/screen-shot-2020-03-17-at-1.38.57-pm.png&#34; alt=&#34;Screen Shot 2020-03-17 at 1.38.57 PM.png&#34;&gt; The AnyConnect.pkg already looks for the Profiles directory in the same directory as the package. Now we need a post installation script to tell the installer binary to use our choices.xml file.  The first step is to find the path to the resources area, which is created by the installer process and cleaned up automatically.  The post install script will be running from that directory, so we can find the path with &lt;code&gt;​dirname&lt;/code&gt;.  Then we tell installer about the choices.xml, the vendor package, and the target volume.  Lastly, I add the certificate to the System Keychain. &lt;a href=&#34;https://gist.github.com/ehemmete/70396684d6ed91687ec4b7f85aa8961b&#34;&gt;https://gist.github.com/ehemmete/70396684d6ed91687ec4b7f85aa8961b&lt;/a&gt; Once the postinstall.sh is created, drag it to the Post-installation well, save your package, and build it. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2020/03/screen-shot-2020-03-17-at-1.39.44-pm.png&#34; alt=&#34;Screen Shot 2020-03-17 at 1.39.44 PM.png&#34;&gt;I then &lt;a href=&#34;https://sneakypockets.wordpress.com/2016/11/04/signing-installer-packages-with-automator/&#34;&gt;sign my packages&lt;/a&gt; with a certificate from my company&amp;rsquo;s Apple developer account. Lastly, a note about the target for &lt;code&gt;installer&lt;/code&gt;. You could put &lt;code&gt;/&lt;/code&gt; in for the target, but if there is a chance this package will be installed while booted from something other than the internal drive (much more common in the era of imaging), the package will be installed to the boot volume, not the correct target.  Using &lt;code&gt;$3&lt;/code&gt; means put it on the target volume.  Rich Trouton mentions it under Installer Script Variables &lt;a href=&#34;https://derflounder.wordpress.com/2014/06/01/understanding-payload-free-packages/&#34;&gt;here&lt;/a&gt;.  There are also mentions in the old PeachPit &lt;a href=&#34;https://books.google.com/books?id=H3awpzaO7IwC&amp;amp;lpg=PA111&amp;amp;dq=%243%20The%20mount%20point%20of%20the%20destination%20volume&amp;amp;pg=PA111#v=onepage&amp;amp;q=$3%20The%20mount%20point%20of%20the%20destination%20volume&amp;amp;f=false&#34;&gt;Mac OS X Deployment&lt;/a&gt; book.  [edit]And thanks to &lt;a href=&#34;https://scriptingosx.com&#34;&gt;Scripting OS X&lt;/a&gt; for the pointer to double quote &lt;code&gt;$3&lt;/code&gt; in the post install script.  In these cases (where it isn&amp;rsquo;t &lt;code&gt;/&lt;/code&gt;) it will likely expand to &lt;code&gt;/Volumes/Macintosh HD/&lt;/code&gt;​ and the space will cause a problem if not quoted.  He also points out that I hard coded the path to the System Keychain, but&lt;code&gt;security&lt;/code&gt; won&amp;rsquo;t be happy if &lt;code&gt;$3&lt;/code&gt; isn&amp;rsquo;t &lt;code&gt;/&lt;/code&gt;, so this isn&amp;rsquo;t as flexible as I intended.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fun with AppleScript and Notes</title>
      <link>http://localhost:1313/posts/fun-with-applescript-and-notes/</link>
      <pubDate>Fri, 20 Dec 2019 16:05:53 +0000</pubDate>
      <guid>http://localhost:1313/posts/fun-with-applescript-and-notes/</guid>
      <description>&lt;p&gt;I have pretty large collection of movies ripped from my DVDs and a few Blu-Rays stored on a file server. Occasionally when I want to watch something old that we have, I&amp;rsquo;d rather borrow a Blu-Ray from our library to see it in better quality, but it is hard to remember what movies are DVD quality and which are Blu-Ray. The post will show how I collect that information and made it sync to my iPhone. To collect the resolution information I am using &lt;code&gt;mdls -name kMDItemPixelHeight $movie&lt;/code&gt; and &lt;code&gt;mdls -name kMDItemPixelWidth $movie&lt;/code&gt;. I initially thought about writing this to a static webpage, but didn&amp;rsquo;t want to go to the trouble of setting all that up.  I had visions of launchdaemons and shell scripts to automate it all, but that felt like too much work for a trivial want.  So I started thinking about other ways to get data available on the go and eventually remembered Notes.  That lead to a bit of research, including the always useful &lt;a href=&#34;https://www.macosxautomation.com/applescript/notes/02.html&#34;&gt;MacOSXAutomation&lt;/a&gt; and of course a &lt;a href=&#34;https://apple.stackexchange.com/questions/295569/can-an-applescript-write-to-a-notes-app-document&#34;&gt;StackExchange&lt;/a&gt; post. The fun part is using AppleScript to write to a note in Notes.app which then is synced through iCloud automatically. Notes.app notes use html for formatting which can be pretty powerful. In my case, I just need each entry on its own line. In AppleScript Editor I saved the following as a script and now double click it when I want to update the note.```&#xA;&lt;strong&gt;set&lt;/strong&gt; ss &lt;strong&gt;to&lt;/strong&gt; &amp;ldquo;cd /Volumes/External/Media/Movies&#xA;for movie in *.m*; do&#xA;height=$(mdls -name kMDItemPixelHeight \&amp;quot;$movie\&amp;rdquo; | awk &amp;lsquo;{print $NF}&amp;rsquo;)&#xA;width=$(mdls -name kMDItemPixelWidth \&amp;quot;$movie\&amp;quot; | awk &amp;lsquo;{print $NF}&amp;rsquo;)&#xA;echo \&amp;quot;&lt;!-- raw HTML omitted --&gt;${movie}, ${height}, ${width}&lt;!-- raw HTML omitted --&gt;\&amp;quot;&#xA;done&amp;quot;&#xA;&lt;strong&gt;set&lt;/strong&gt; notebody &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;do shell script&lt;/strong&gt; ss&#xA;&lt;strong&gt;tell&lt;/strong&gt; &lt;em&gt;application&lt;/em&gt; &amp;ldquo;Notes&amp;rdquo;&#xA;** activate**&#xA;** tell** default account &lt;strong&gt;to&lt;/strong&gt; &lt;strong&gt;tell&lt;/strong&gt; &lt;em&gt;folder&lt;/em&gt; &amp;ldquo;Notes&amp;rdquo;&#xA;**  set** body &lt;strong&gt;of&lt;/strong&gt; &lt;em&gt;note&lt;/em&gt; &amp;ldquo;Movie Resolutions&amp;rdquo; &lt;strong&gt;to&lt;/strong&gt; notebody&#xA;** end** &lt;strong&gt;tell&lt;/strong&gt;&#xA;&lt;strong&gt;end&lt;/strong&gt; &lt;strong&gt;tell&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using a Swift app to get rid of lots of AppleScript dialogs</title>
      <link>http://localhost:1313/posts/using-a-swift-app-to-get-rid-of-lots-of-applescript-dialogs-comments/</link>
      <pubDate>Mon, 15 Apr 2019 13:17:32 +0000</pubDate>
      <guid>http://localhost:1313/posts/using-a-swift-app-to-get-rid-of-lots-of-applescript-dialogs-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.arminip.com/&#34; title=&#34;mtentor@arminip.com&#34;&gt;Marty Tentor&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Feb 5, 2021&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Thanks for the example. I have a similar challenge, getting a one window gui for applescipt. Just want to confirm that you are using Swift to generate text files and then running Applescript to get the data from the text files and running the real work on the targeted application. Is the Applescript being run separately,(called by the user) or is the Applescript call coming from within the Swift program?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using a Swift app to get rid of lots of AppleScript dialogs</title>
      <link>http://localhost:1313/posts/using-a-swift-app-to-get-rid-of-lots-of-applescript-dialogs/</link>
      <pubDate>Mon, 15 Apr 2019 13:17:32 +0000</pubDate>
      <guid>http://localhost:1313/posts/using-a-swift-app-to-get-rid-of-lots-of-applescript-dialogs/</guid>
      <description>&lt;p&gt;There was recently a discussion in #bash in the &lt;a href=&#34;https://macadmins.org&#34;&gt;MacAdmin Slack&lt;/a&gt; about better ways to handle multiple dialogs for gathering info from users or techs.  In my company&amp;rsquo;s provisioning process we want to collect a number of things to be picked up by our inventory system (BigFix).  This started with a set of AppleScript Display Dialogs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2019/04/applescriptpopups.2019-04-13-12_40_20.gif&#34; alt=&#34;AppleScriptPopUps.2019-04-13 12_40_20.gif&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;This is not a great experience and gets worse as we try to make it less error prone (do you see the mistake?). To make this better for our techs, I wrote a relatively simple Swift application.  I didn&amp;rsquo;t/don&amp;rsquo;t have much Swift experience (just playing around in Playgrounds, a few simple tutorials), so I can&amp;rsquo;t say this is the &amp;ldquo;right&amp;rdquo; way to do this, but it works for me/our process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting the Screen Saver to a static image</title>
      <link>http://localhost:1313/posts/setting-the-screen-saver-to-a-static-image/</link>
      <pubDate>Fri, 02 Feb 2018 20:28:49 +0000</pubDate>
      <guid>http://localhost:1313/posts/setting-the-screen-saver-to-a-static-image/</guid>
      <description>&lt;p&gt;On our Windows systems we have a static image as our screen saver and I wanted to match that on our Macs.  There are several options in the Screen Saver settings of System Preferences.  I needed to figure out how to set a default across all our Macs with a script.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2018/02/screen-shot-2018-02-02-at-1-55-51-pm.png&#34; alt=&#34;Screen Shot 2018-02-02 at 1.55.51 PM.png&#34;&gt;  We wanted a single image statically on the screen.  By making a folder with one image in it, we can use the slideshow options to show our single image. After setting things up the way I wanted, I looked around to see where the settings were stored.  You can use something like &lt;a href=&#34;https://fsmonitor.com&#34;&gt;FSMonitor&lt;/a&gt; to watch what files are edited when you change things in System Preferences.  These settings are per user and per device, so they end up in ~/Library/ByHost/com.apple.screensaver.plist, ~/Library/ByHost/com.apple.ScreenSaver.iLifeSlideShows.plist, and ~/Library/ByHost/com.apple.ScreenSaverPhotoChooser.plist.  If you select other options, you might not need all of these files. To work with this files, use &lt;code&gt;defaults -currentHost read [preference-domain]&lt;/code&gt;. First look at com.apple.screensaver.plist:&lt;code&gt;$ defaults -currentHost read com.apple.screensaver { PrefsVersion = 100; idleTime = 1800; moduleDict =     { moduleName = iLifeSlideshows; path = &amp;quot;/System/Library/Frameworks/ScreenSaver.framework/Resources/iLifeSlideshows.saver&amp;quot;; type = 0; }; }&lt;/code&gt;Then ~/Library/ByHost/com.apple.ScreenSaver.iLifeSlideShows.plist:&lt;code&gt;defaults -currentHost read com.apple.ScreenSaver.iLifeSlideShows { styleKey = Classic; }&lt;/code&gt;Then finally, ~/Library/ByHost/com.apple.ScreenSaverPhotoChooser.plist:&lt;code&gt;defaults -currentHost read com.apple.ScreenSaverPhotoChooser { CustomFolderDict =     { identifier = &amp;quot;/Library/Screen Savers/CompanyName&amp;quot;; name = CompanyName; }; LastViewedPhotoPath = &amp;quot;&amp;quot;; SelectedFolderPath = &amp;quot;/Library/Screen Savers/CompanyName&amp;quot;; SelectedSource = 4; }&lt;/code&gt;To set these, we use a very similar command: &lt;code&gt;defaults -currentHost write [preference-domain] [key] [value]&lt;/code&gt;. After some testing I&amp;rsquo;ve found we just need:```&#xA;#!/bin/sh&#xA;defaults -currentHost write com.apple.screensaver moduleDict -dict moduleName iLifeSlideshows path &amp;ldquo;/System/Library/Frameworks/ScreenSaver.framework/Resources/iLifeSlideshows.saver&amp;rdquo; type 0&#xA;defaults -currentHost write com.apple.ScreenSaver.iLifeSlideShows styleKey Classic&#xA;defaults -currentHost write com.apple.ScreenSaverPhotoChooser SelectedFolderPath &amp;ldquo;/Library/Screen Savers/CompanyName&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automator application to run script as root</title>
      <link>http://localhost:1313/posts/automator-application-to-run-script-as-root-comments/</link>
      <pubDate>Tue, 12 Dec 2017 15:36:31 +0000</pubDate>
      <guid>http://localhost:1313/posts/automator-application-to-run-script-as-root-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://rayleighwickfordlabour.org.uk&#34; title=&#34;n.martin@rayleighwickfordlabour.org.uk&#34;&gt;n.martin&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Dec 2, 2017&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Heyas - it looks like you might be using Jamf from the last screenshot (jamfhelper?). If you&amp;rsquo;re running Jamf Pro 10, you could put the installer policy in Self Service and get a URL that opens Self Service and runs that policy automatically: &lt;a href=&#34;http://docs.jamf.com/10.0.0/jamf-pro/administrator-guide/Making&#34;&gt;http://docs.jamf.com/10.0.0/jamf-pro/administrator-guide/Making&lt;/a&gt;_Items_Available_to_Users_in_Jamf_Self_Service_for_macOS.html There&amp;rsquo;s a section on that page; Item URLs An AppleScript with: do shell script &amp;ldquo;open &amp;quot; might work (haven&amp;rsquo;t tested but would be really interested).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automator application to run script as root</title>
      <link>http://localhost:1313/posts/automator-application-to-run-script-as-root/</link>
      <pubDate>Tue, 12 Dec 2017 15:36:31 +0000</pubDate>
      <guid>http://localhost:1313/posts/automator-application-to-run-script-as-root/</guid>
      <description>&lt;p&gt;I was recently asked to create a shortcut on our users&amp;rsquo; Desktops to kick off the High Sierra install. We are caching the installer through our management system. In the past I have created a shortcut to the installer on their Desktop, but that required them to click through the many continue buttons. This method will use the startosinstall script from &lt;a href=&#34;https://github.com/bp88/JSS-Scripts/blob/master/OS_Upgrade.sh&#34;&gt;Slack member @bp&lt;/a&gt; to start the install with minimal user interaction. I wrap that shell script (with the appropriate modifications for my environment) in an Automator application, but to have the script run as root, I call it with Run AppleScript using the &lt;code&gt;do shell script ... with administrator privileges&lt;/code&gt; form. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2017/12/automatorinstaller.png&#34; alt=&#34;AutomatorInstaller.png&#34;&gt; The full AppleScript is&lt;/p&gt;</description>
    </item>
    <item>
      <title>Signing Installer Packages with Automator</title>
      <link>http://localhost:1313/posts/signing-installer-packages-with-automator-comments/</link>
      <pubDate>Sat, 05 Nov 2016 01:51:33 +0000</pubDate>
      <guid>http://localhost:1313/posts/signing-installer-packages-with-automator-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%22developers@buildtestrun.com%22&#34;&gt;mbonne&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Apr 5, 2019&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;+1 automation services levelled up&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;[…] is created, drag it to the Post-installation well, save your package, and build it. I then sign my packages with a certificate from my company’s Apple developer […]&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Signing Installer Packages with Automator</title>
      <link>http://localhost:1313/posts/signing-installer-packages-with-automator/</link>
      <pubDate>Sat, 05 Nov 2016 01:51:33 +0000</pubDate>
      <guid>http://localhost:1313/posts/signing-installer-packages-with-automator/</guid>
      <description>&lt;p&gt;Apple packages (.pkgs) are opened by the GUI Installer.app or the command line installer command. If a package is unsigned and gets a quarantine flag (from being transferred over a network), the GUI Installer will refuse to run it.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-07-35-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.07.35 PM.png&#34;&gt; We can get around that with a right-click -&amp;gt; Open, but we shouldn&amp;rsquo;t be training computer users to ignore security warnings like this. &lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-04-at-4-49-33-pm.png&#34; alt=&#34;Screen Shot 2016-11-04 at 4.49.33 PM.png&#34;&gt; If you are creating your own packages, and users or techs may run them manually, then you really should be signing them. Even if you are deploying them in a way that a person won&amp;rsquo;t see a warning, signing packages can be very easy and provide a check that nothing changed since you created it. See below the break for how to easily automate signing packages. I use &lt;a href=&#34;http://s.sudre.free.fr/Software/Packages/about.html&#34;&gt;WhiteBox Packages&lt;/a&gt; to create most of my packages. It has a built in feature to sign packages it builds, but recent versions have had some problems with it and when it works it still has to be set per package project. The Apple provided tool to sign our packages is &lt;code&gt;productsign&lt;/code&gt;. This works, but to make things easier on myself, I have wrapped that up in an Automator application that I can use as a droplet. The basic format for using productsign is &lt;code&gt;productsign [options] --sign identity input-product-path output-product-path&lt;/code&gt; Interestingly, the man page for productsign doesn&amp;rsquo;t show any available options. So next we want to &lt;code&gt;--sign&lt;/code&gt; using &lt;code&gt;identity&lt;/code&gt;. This is our Developer ID Installer certificate from Apple&amp;rsquo;s developer program. This does require a paid membership, but if you work for an organization supporting Macs, there is plenty of benefit to offset the $99 or $399/year (signing identities, early access to OS builds for testing, etc). To sign packages we need a Developer ID Installer (see &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW6&#34;&gt;Apple&amp;rsquo;s documentation&lt;/a&gt;) Once you have your Dev ID Installer certificate installed in your keychain, then we can get the appropriate reference for it. Open /Applications/Utilities/Keychain Access. Search for Developer ID and select the appropriate certificate. Then you can highlight and copy the name.  If you are a part of more than one developer program, select the &amp;ldquo;right&amp;rdquo; one here.  You can create several Automator applications if you want to have one for each ID.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-25-14-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.25.14 PM.png&#34;&gt; So now we can write our command &lt;code&gt;productsign --sign &#39;Developer ID Installer: OrgName (Code)&#39; in_pkg out_pkg&lt;/code&gt;. For example &lt;code&gt;productsign --sign &#39;Developer ID Installer: OrgName (Code)&#39; ~/Development/Unsigned.pkg ~/Development/Signed.pkg&lt;/code&gt;. This will prompt to allow productsign access to your keychain. Say Allow or Always Allow.&lt;code&gt;$ productsign --sign &#39;Developer ID Installer: OrgName (Code)&#39; ~/Desktop/Unsigned/build/Unsigned.pkg ~/Desktop/Unsigned/build/Signed.pkg productsign: using timestamp authority for signature productsign: signing product with identity &amp;quot;Developer ID Installer: OrgName (Code)&amp;quot; from keychain /Users/username/Library/Keychains/login.keychain-db productsign: adding certificate &amp;quot;Developer ID Certification Authority&amp;quot; productsign: adding certificate &amp;quot;Apple Root CA&amp;quot; productsign: Wrote signed product archive to /Users/username/Desktop/Unsigned/build/Signed.pkg&lt;/code&gt;Now when we run the installer by double clicking it, the installer opens. Notice the lock in the upper right corner. Click the clock and we can examine the certificate chain back to Apple&amp;rsquo;s Root.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-29-14-pm1.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.29.14 PM.png&#34;&gt; The idea when we started was to make this easy to do since we might need to sign a lot of packages over time. To automate this, open /Applications/Automator.app. Choose to create a New Document. Then choose Application for the type and click Choose.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-31-43-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.31.43 PM.png&#34;&gt; Search for shell in the Actions name search field. Drag a run shell script action to the workflow.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-32-11-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.32.11 PM.png&#34;&gt; First adjust the Pass input: pop up to as arguments.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/11/screen-shot-2016-11-02-at-3-33-00-pm.png&#34; alt=&#34;Screen Shot 2016-11-02 at 3.33.00 PM.png&#34;&gt; That will fill in the template for us. Then enter our productsign command with some slight differences. The &lt;code&gt;--sign&lt;/code&gt; and &lt;code&gt;identity&lt;/code&gt; will be the same, but now for the input and output, we need to make this work with whatever is dropped on the application. The packages will be passed as arguments and the for loop will work on each one in turn. These will be assigned to the pkg variable, so that becomes our input file. Then for the output, I settled on packagename.signed.pkg to differentiate the output from the input. This &lt;code&gt;$(sed &#39;s/.pkg$/.signed.pkg/g&#39; &amp;lt;&amp;lt;&amp;lt; $pkg)&lt;/code&gt; will find the last &amp;lsquo;.pkg&amp;rsquo; in the filename and replace it with &amp;lsquo;.signed.pkg&amp;rsquo;, while keeping the name portion the same (see note at the end for how this works) .  Notice I also changed the &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;pkg&lt;/code&gt; just to make it clear what the variable represents.```&#xA;for pkg in &amp;ldquo;$@&amp;rdquo;&#xA;do&#xA;productsign &amp;ndash;sign &amp;lsquo;Developer ID Installer: OrgName (Code)&amp;rsquo; &amp;ldquo;$pkg&amp;rdquo; &amp;ldquo;$(sed &amp;rsquo;s/.pkg$/.signed.pkg/g&amp;rsquo; &amp;laquo;&amp;lt; $pkg)&amp;rdquo;&#xA;done&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mounting File Shares Based on AD Group Membership using Enterprise Connect</title>
      <link>http://localhost:1313/posts/mounting-file-shares-based-on-ad-group-membership-using-enterprise-connect-comments/</link>
      <pubDate>Mon, 26 Sep 2016 14:27:25 +0000</pubDate>
      <guid>http://localhost:1313/posts/mounting-file-shares-based-on-ad-group-membership-using-enterprise-connect-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;%22brinckmann@bevelo.de%22&#34;&gt;tam&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Jan 3, 2018&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;Setting mount_options and open_options to none under 10.13.3 didtn work for me..but thank you :) Python[50420:162669] -[OC_PythonString objectForKey:]: unrecognized selector sent to instance 0x7fd716e28a80 Traceback (most recent call last): File &amp;ldquo;&amp;rdquo;, line 38, in File &amp;ldquo;&amp;rdquo;, line 30, in mount_share ValueError: NSInvalidArgumentException - -[OC_PythonString objectForKey:]: unrecognized selector sent to instance 0x7fd716e28a80&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;hmm&amp;hellip; I guess I ended up doing it a bit differently in production. Does this work for you? def mount_share(share_path): # Mounts a share at /Volumes, returns the mount point or raises an error sh_url = CoreFoundation.CFURLCreateWithString(None, share_path, None) # Set UI to reduced interaction # open_options = {NetFS.kNAUIOptionKey: NetFS.kNAUIOptionNoUI} # Allow mounting sub-directories of root shares # mount_options = {NetFS.kNetFSAllowSubMountsKey: True} # Mount! result, output = NetFS.NetFSMountURLSync(sh_url, None, None, None, None, None, None) # Check if it worked if result != 0: raise Exception(&amp;lsquo;Error mounting url &amp;ldquo;%s&amp;rdquo;: %s&amp;rsquo; % (share_path, output)) # Return the mountpath return str(output[0])&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mounting File Shares Based on AD Group Membership using Enterprise Connect</title>
      <link>http://localhost:1313/posts/mounting-file-shares-based-on-ad-group-membership-using-enterprise-connect/</link>
      <pubDate>Mon, 26 Sep 2016 14:27:25 +0000</pubDate>
      <guid>http://localhost:1313/posts/mounting-file-shares-based-on-ad-group-membership-using-enterprise-connect/</guid>
      <description>&lt;p&gt;[edit] Apple changed something in macOS 10.13 High Sierra. The mount_share() function in the below python needs to be changed to set the open_options and mount_options to &amp;lsquo;None&amp;rsquo;. This can be done like&lt;code&gt;def mount\_share(share\_path): # Mounts a share at /Volumes, returns the mount point or raises an error sh\_url = CoreFoundation.CFURLCreateWithString(None, share\_path, None) # Set UI to reduced interaction #open\_options  = {NetFS.kNAUIOptionKey: NetFS.kNAUIOptionNoUI} # Allow mounting sub-directories of root shares #mount\_options = {NetFS.kNetFSAllowSubMountsKey: True} # Mount! result, output = NetFS.NetFSMountURLSync(sh\_url, None, None, None, None, None, None) # Check if it worked if result != 0: raise Exception(&#39;Error mounting url &amp;quot;%s&amp;quot;: %s&#39; % (share\_path, output)) # Return the mountpath return str(output\[0\])&lt;/code&gt;[/edit] In a &lt;a href=&#34;https://sneakypockets.wordpress.com/2016/09/22/using-ldapsearch-to-get-ad-data/&#34;&gt;previous post&lt;/a&gt;, I discussed using &lt;code&gt;ldapsearch&lt;/code&gt; to look up user data from AD.  In this post we will use the user&amp;rsquo;s memberOf attribute to mount the appropriate file share. Some background on my use case for this.  The company I work for has ~15,000 Windows computers in use bound to AD.  When a user logs in, a GPO runs a batch file hosted on the domain controller&amp;rsquo;s file share.  The batch file is basically a large case statement&lt;code&gt;if in group A; then     mount shares X and Y if in group B; then     mount share Z&lt;/code&gt;I wanted to provide our Mac users with a similar experience.  Read how below the break. Our Macs are not bound to Active Directory and we have historically had password confusion issues with network vs local passwords and keychain sync issues.  To help this we have setup Apple&amp;rsquo;s excellent &lt;a href=&#34;https://jamfnation.jamfsoftware.com/discussion.html?id=17757&#34;&gt;Enterprise Connect&lt;/a&gt; to help with that. When a Mac user is logged in and is on a network that can connect to our domain controllers (internal, VPN, etc), Enterprise Connect automatically retrieves a Kerberos Ticket Granting Ticket for the user and, optionally, confirms that the local password is in sync with the user&amp;rsquo;s AD password and prompts the user to fix things if necessary.  Enterprise Connect can also mount file shares including the user&amp;rsquo;s home folder.  This is handled on a per user basis or by profile.  This works great if the user wants to mount a share they use, but it doesn&amp;rsquo;t scale well across many locations and OUs. One of the other benefits of Enterprise Connect is that it can run scripts based on a couple of triggers including a successful connection (i.e. the Mac is on the right network and a valid TGT has been granted).  Note that Enterprise Connect can only run shell scripts this way. The script to run can be configured in the preference file or via profile with the key/value pair:&lt;code&gt;connectionCompletedScriptPath /Library/Scripts/LogonFileShareMounter.wrapper.sh&lt;/code&gt;This script is stored locally on the client system and is what calls the script that will do the actual mounting.  Before that though, we first make sure that we have the current version of the mounting script by checking an embedded serial number (similar to how DNS primary/secondaries work).  The master copy of the mounting script is hosted on the same share as the Windows batch file.  This way it can be updated whenever the Windows version is.  As long as the serial number is updated, the Mac clients will get the updated version next time they successfully connect with Enterprise Connect. &lt;a href=&#34;https://gist.github.com/ehemmete/618c96dc364d8a40723e30692617d2a8&#34;&gt;https://gist.github.com/ehemmete/618c96dc364d8a40723e30692617d2a8&lt;/a&gt; The script starts by creating a directory if necessary and then mounting the file share where the master script is kept.  The &lt;code&gt;mount_smbfs&lt;/code&gt; line authenticates to the share with the Kerberos TGT  from Enterprise Connect.  Then as long as the master script can be found, the local serial is compared to the remote version.  If the remote is newer, it is copied in place of the local copy.  Then the share is unmounted and the local copy of the script is run. &lt;a href=&#34;https://gist.github.com/ehemmete/2f893815bd03d96d89855feb4e9b7237&#34;&gt;https://gist.github.com/ehemmete/2f893815bd03d96d89855feb4e9b7237&lt;/a&gt; This script starts with the serial number that is compared against the master copy.  Then the part between the ### lines comes straight from MacAdmin Slack member and frequent gist&amp;rsquo;er Froger/pudquick/MikeyMikey.  His &lt;a href=&#34;https://gist.github.com/pudquick/1362a8908be01e23041d&#34;&gt;gist&lt;/a&gt; is referenced in the script and provides a python function for mounting network shares easily and in such as way that the system treats them the same as the Connect to Server dialog box. Then we get the user&amp;rsquo;s local account name, which in my environment is the same as their Active Directory name, and use &lt;code&gt;ldapsearch&lt;/code&gt; to find their group memberships.  Next we need to clean up the output.  At the end we have an array of names of the groups this user is a member of.  Now we start a case-like statement similar to the Window counter part.```&#xA;if &amp;lsquo;Group1&amp;rsquo; in groups:&#xA;mount_share(&amp;lsquo;smb://server.my.domain.com/share&amp;rsquo;)&#xA;mount_share(&amp;lsquo;smb://server2.my.domain.com/share2&amp;rsquo;)&#xA;if &amp;lsquo;Group2&amp;rsquo; in groups:&#xA;mount_share(&amp;lsquo;smb://server3.my.domain.com/share&amp;rsquo;)&#xA;etc&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using ldapsearch to get AD data</title>
      <link>http://localhost:1313/posts/using-ldapsearch-to-get-ad-data-comments/</link>
      <pubDate>Thu, 22 Sep 2016 17:31:02 +0000</pubDate>
      <guid>http://localhost:1313/posts/using-ldapsearch-to-get-ad-data-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sneakypockets.wordpress.com/2016/09/26/mounting-file-shares-based-on-ad-group-membership-using-enterprise-connect/&#34; title=&#34;&#34;&gt;Mounting File Shares Based on AD Group Membership using Enterprise Connect | My Thoughts&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Sep 1, 2016&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;[…] a previous post, I discussed using ldapsearch to look up user data from AD.  In this post we will use the […]&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Using ldapsearch to get AD data</title>
      <link>http://localhost:1313/posts/using-ldapsearch-to-get-ad-data/</link>
      <pubDate>Thu, 22 Sep 2016 17:31:02 +0000</pubDate>
      <guid>http://localhost:1313/posts/using-ldapsearch-to-get-ad-data/</guid>
      <description>&lt;p&gt;It has been common for Macs to be bound to Active Directory for a variety of reasons.  Recently, the trend has been to move away from binding due to password/lock out issues, the rise of cloud based services, and SSO options that are more comprehensive of the services users need. With the move away from binding, one thing we lose is the ability to look up user and group data with &lt;code&gt;dscl&lt;/code&gt;. Here is a decent primer on &lt;code&gt;dscl&lt;/code&gt;: http://www.macos.utah.edu/documentation/authentication/dscl.html (just replace every instance of netinfo with dslocal in your mind). With this move we need another tool to query for information and &lt;code&gt;ldapsearch&lt;/code&gt; can do this for us.  There are a lot of ways to use &lt;code&gt;ldapsearch&lt;/code&gt; depending on your end goal.  This post will discuss getting user data out of an Active Directory server.  In a future post I hope to explain how I am using this to mount the appropriate file shares for users based on their group membership. The basic format for ldapsearch is to tell it where to search, with what account to search, what to search for, and what data to return from any matches.  A common search I use is:&lt;code&gt;ldapsearch -LLL -H &amp;quot;ldap://${adURL}&amp;quot; -b &amp;quot;${searchbase}&amp;quot; &amp;quot;(&amp;amp;(objectCategory=Person)(objectClass=User)(sAMAccountName=$endUser))&amp;quot; memberOf&lt;/code&gt;We start with the command, of course.  Then the &lt;code&gt;-LLL&lt;/code&gt; tells the command to limit the output.  I find this gives less output to clean out before I get what I want.  The man page says:&lt;code&gt;**\-L**     Search  results  are  display in LDAP Data Interchange Format detailed in **ldif**(5).  A single **\-L** restricts the output to LDIFv1. A second **\-L** disables comments.  A third **\-L** disables printing of the LDIF version.  The defaultis to use an extended version of LDIF.&lt;/code&gt;Then we need to tell ldapsearch where to search.  There are a few parts to this.  The first is the &lt;code&gt;-H&lt;/code&gt; option with an ldapuri which will often be the DNS name of the domain controller you want to search on in the form &amp;ldquo;ldap://my.domain.com&amp;rdquo;.  (This can generally be found with &lt;code&gt;host -t SRV _ldap._tcp.my.domain.com&lt;/code&gt;).  If you have multiple DCs, you can search more than one, but I normally pick a close one to search.  Then &lt;code&gt;-b&lt;/code&gt; specifies the search base to start the search from.  I use the root of the LDAP structure, but if you know where your data is going to be you can be more specific.  This will be in the form &lt;code&gt;&amp;quot;dc=my,dc=domain,dc=com&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;OU=Computers,dc=my,dc=domain,dc=com&amp;quot;&lt;/code&gt;. Next we need to tell ldapsearch who to search as.  In my command above, I don&amp;rsquo;t make it explicit, but the default is to check for a kerberos ticket granting ticket and use that for authentication.  This works nicely for scripting since there is no password to worry about, but you do need to be sure there will be a TGT when the script/command runs.  Another form of ldapsearch command would be:&lt;code&gt;ldapsearch -LLL -x -H &amp;quot;ldaps://$adURL&amp;quot; -D &amp;quot;${techNameTest}@my.domain.com&amp;quot; -w &amp;quot;$techPW&amp;quot; -b &amp;quot;${searchbase}&amp;quot; &amp;quot;(&amp;amp;(objectCategory=Person)(objectClass=User)(sAMAccountName=$endUser))&amp;quot; memberOf&lt;/code&gt;In this search we first tell ldapsearch to use simple (username/password) authentication with the &lt;code&gt;-x&lt;/code&gt; option.  Then specify who to search as with &lt;code&gt;-D&lt;/code&gt; and the full form should be &lt;code&gt;&amp;quot;user@domain&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;domain\user&amp;quot;&lt;/code&gt;.  Then the &lt;code&gt;-w&lt;/code&gt; is used to put the password inline with the command.  If there are special characters in the password be sure to wrap it in single quotes; &lt;code&gt;&#39;pa$$W0rd!&#39;&lt;/code&gt;.  For one off searches, you can use &lt;code&gt;-W&lt;/code&gt; to have the command prompt for the password.  &lt;strong&gt;Also note,when using password base authentication, we should really use ldaps:// in the &lt;code&gt;-H&lt;/code&gt; option.  Otherwise the password will be sent across the network in the clear.&lt;img src=&#34;https://sneakypockets.wordpress.com/wp-content/uploads/2016/09/screen-shot-2016-09-22-at-10-46-17-am1.png&#34; alt=&#34;Screen Shot 2016-09-22 at 10.46.17 AM.png&#34;&gt;With kerberos authentication the password is not sent across the network at all.&lt;/strong&gt; Next we specify what to search for.  In this case I am searching for a user&amp;rsquo;s account, but it could be in many different locations.  We can string filters together using the &amp;ldquo;(&amp;amp;(filter)(filter)(filter)&amp;hellip;)&amp;rdquo; format.  The filters can include a wide range of things.  I am limiting the search based on &lt;code&gt;objectCategory=Person&lt;/code&gt;, &lt;code&gt;objectClass=User&lt;/code&gt;, and &lt;code&gt;sAMAccountName=first.last&lt;/code&gt;.  It turns out I can get away with just using the sAMAccountName if I know exactly who I am looking for.  If we only need one filter, we can use the form &amp;ldquo;(filter)&amp;rdquo;, i.e. &lt;code&gt;&amp;quot;(sAMAccountName=first.last)&amp;quot;&lt;/code&gt;. Lastly we tell &lt;code&gt;ldapsearch&lt;/code&gt; what data we want back.  This is optional if you want the entire record, but if we just need one piece it is very useful to get that one thing returned.  In this case I am requesting just the &lt;code&gt;memberOf&lt;/code&gt; values from the account.  This will tell me the groups this user is a member of. If we put this all together we can get something like this (note you can limit the output further with &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; , which will redirect the authentication messages which are sent to stderr): [code language=&amp;ldquo;bash&amp;rdquo;]$ldapsearch -LLL -H &amp;ldquo;ldap://dc.my.domain.com&amp;rdquo; -b &amp;ldquo;dc=my,dc=domain,dc=com&amp;rdquo; &amp;ldquo;(sAMAccountName=last)&amp;rdquo; memberOf SASL/GSSAPI authentication started SASL username: &lt;a href=&#34;mailto:tech.id@MY.DOMAIN.COM&#34;&gt;tech.id@MY.DOMAIN.COM&lt;/a&gt; SASL SSF: 112 SASL data security layer installed. dn: CN=Tech.ID,OU=CO,OU=Users,OU=US,DC=MY,DC=DOMAIN,DC=com memberOf: CN=AM IT Infrastructure Group,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=AM AON IT,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=WebReports_ReadOnly,OU=Groups,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=IT - MaaS360 AM Compliance Block,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=AM MFA VPN,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=Configuration Management,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=IT - Lync Users in AM,OU=Distribution Lists,OU=Exchange,OU=US,DC=AM,DC=DOMAIN,DC=COM memberOf: CN=IT - Cisco usCUCMCluster02 Users,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=L\#Contractor,OU=Groups,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=SCCDUsers-AM,OU=Global,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=IT - Exchange 365 Users in AM,OU=Distribution Lists,OU=Exchange,OU=US,DC=MY,DC=DOMAIN,DC=COM memberOf: CN=AON IT Contractors (US),OU=Distribution Lists,OU=Exchange,OU=US,DC=AM,DC=DOMAIN,DC=COM memberOf: CN=Americas IT Consultants,OU=Distribution Lists,OU=Exchange,OU=US,DC=AM,DC=DOMAIN,DC=COM # refldap://DomainDnsZones.AM.DOMAIN.com/DC=DomainDnsZones,DC=MY,DC=DOMAIN,DC=com [/code]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Update to network GeekTool script</title>
      <link>http://localhost:1313/posts/update-to-network-geektool-script-comments/</link>
      <pubDate>Tue, 05 May 2015 21:06:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/update-to-network-geektool-script-comments/</guid>
      <description>&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sneakypockets.wordpress.com/2019/07/29/shell-to-swift-with-a-bit-of-python/&#34; title=&#34;&#34;&gt;Shell to Swift with a bit of Python | My Thoughts&lt;/a&gt; - &lt;!-- raw HTML omitted --&gt;Jul 1, 2019&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;[…] want to make this too long. So this will be an overview of the project. For years I have had a shell script that collected some network info and it was displayed on my desktop using NerdTool and then […]&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Update to network GeekTool script</title>
      <link>http://localhost:1313/posts/update-to-network-geektool-script/</link>
      <pubDate>Tue, 05 May 2015 21:06:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/update-to-network-geektool-script/</guid>
      <description>&lt;p&gt;I have been seeing a lot of noise in my logs about IO80211ScanManager scanning for Wi-Fi networks constantly.  I finally noticed that it was triggered by system_profiler and realized that I was using system_profiler to find my current Wi-Fi network and what channel I was connected to. See the original here: &lt;a href=&#34;https://sneakypockets.wordpress.com/2014/08/30/network-services-and-ips/&#34;&gt;https://sneakypockets.wordpress.com/2014/08/30/network-services-and-ips/&lt;/a&gt; So I changed how I find that data in my GeekTool script.  I also took the opportunity to simplify the whole thing a bit more.  Here is the new version: [code language=&amp;ldquo;bash&amp;rdquo;] #! /bin/bash connection=false services=$(networksetup -listallnetworkservices) while read service; do ip=$(networksetup -getinfo &amp;ldquo;$service&amp;rdquo; | grep &amp;ldquo;IP address&amp;rdquo; | grep -v &amp;ldquo;IPv6&amp;rdquo; | awk &amp;lsquo;{print $3}&amp;rsquo;) if [ &amp;ldquo;$ip&amp;rdquo; != &amp;quot;&amp;quot; ]; then echo &amp;ldquo;$service : $ip&amp;rdquo; connection=true if [ &amp;ldquo;$service&amp;rdquo; == &amp;ldquo;Wi-Fi&amp;rdquo; ]; then NetName=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep SSID | grep -v BSSID | cut -d&amp;quot;:&amp;quot; -f2 | tr -d &amp;lsquo;[[:space:]]&amp;rsquo;) Channel=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep channel | cut -d&amp;quot;:&amp;quot; -f2 | tr -d &amp;lsquo;[[:space:]]&amp;rsquo;) echo &amp;ldquo;$NetName / $Channel&amp;rdquo; fi fi done &amp;laquo;&amp;lt;&amp;quot;$services&amp;quot; if [ $connection = false ]; then echo &amp;ldquo;No Connected Services&amp;rdquo; else extIP=$(curl -s &lt;a href=&#34;http://checkip.dyndns.org/&#34;&gt;http://checkip.dyndns.org/&lt;/a&gt; | sed &amp;rsquo;s/[a-zA-Z&amp;lt;&amp;gt;/ :]//g&amp;rsquo;) if [ &amp;ldquo;$extIP&amp;rdquo; != &amp;quot;&amp;quot; ]; then echo &amp;ldquo;External IP: $extIP&amp;rdquo; else echo &amp;ldquo;No External Connection&amp;rdquo; fi fi [/code] Instead of system_profiler the airport command to get the network name and channel.  This stopped the all the message in my logs. I also moved the name and channel logic into the main while read block. This prevents the name and channel from getting separated from the Wi-Fi network IP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unhide /Users in 10.9.3</title>
      <link>http://localhost:1313/posts/unhide-users-in-10-9-3/</link>
      <pubDate>Fri, 16 May 2014 18:31:20 +0000</pubDate>
      <guid>http://localhost:1313/posts/unhide-users-in-10-9-3/</guid>
      <description>&lt;p&gt;[Further Edit] The below was fixed by Apple.  This is no longer necessary, but I&amp;rsquo;ll leave it here incase the ideas help someone. [/Further Edit] [Edit] So the below doesn&amp;rsquo;t actually work. Something changes the permissions and hidden flag after my launch daemon runs. I added a check of the files (just ls &amp;gt; to a file) and they get set correctly but by the time I am logged in something has changed it back. [/edit] The recent 10.9.3 update has made a strange change for a number of OS X users.  The directory that holds everyone&amp;rsquo;s home folder, /Users, has been hidden along with the /Users/Shared folder. A number of people have found a solution using chflags as follows: [code language=&amp;ldquo;bash&amp;rdquo;]sudo chflags nohidden /Users sudo chflags nohidden /Users/Shared[/code] But this doesn&amp;rsquo;t last through a reboot. Not as widely reported, there has also been a permissions change to /Users making it writable by the wheel group and everyone. I have seen an Applescript used as a login item to change the settings back, but this runs every time a user logs in, when the process only needs to run after each reboot.  So I put together another option that uses a launch daemon and a shell script. The shell script is: [code language=&amp;ldquo;bash&amp;rdquo;]#!/bin/sh chmod 755 /Users chflags nohidden /Users chflags nohidden /Users/Shared[/code] This should get saved in /Library/Scripts/fixUsersFolder.sh and then made executable. Then the launchd plist is: [code language=&amp;ldquo;xml&amp;rdquo;]&amp;amp;amp;lt;?xml version=&amp;amp;amp;quot;1.0&amp;amp;amp;quot; encoding=&amp;amp;amp;quot;UTF-8&amp;amp;amp;quot;?&amp;amp;amp;gt; &amp;amp;amp;lt;!DOCTYPE plist PUBLIC &amp;amp;amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;amp;amp;quot; &amp;amp;amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;amp;amp;quot;&amp;amp;amp;gt; &amp;amp;amp;lt;plist version=&amp;amp;amp;quot;1.0&amp;amp;amp;quot;&amp;amp;amp;gt; &amp;amp;amp;lt;dict&amp;amp;amp;gt; &amp;amp;amp;lt;key&amp;amp;amp;gt;Label&amp;amp;amp;lt;/key&amp;amp;amp;gt; &amp;amp;amp;lt;string&amp;amp;amp;gt;com.sneakypockets.fixHidden&amp;amp;amp;lt;/string&amp;amp;amp;gt; &amp;amp;amp;lt;key&amp;amp;amp;gt;Program&amp;amp;amp;lt;/key&amp;amp;amp;gt; &amp;amp;amp;lt;string&amp;amp;amp;gt;/Library/Scripts/fixUsersFolder.sh&amp;amp;amp;lt;/string&amp;amp;amp;gt; &amp;amp;amp;lt;key&amp;amp;amp;gt;RunAtLoad&amp;amp;amp;lt;/key&amp;amp;amp;gt; &amp;amp;amp;lt;true/&amp;amp;amp;gt; &amp;amp;amp;lt;/dict&amp;amp;amp;gt; &amp;amp;amp;lt;/plist&amp;amp;amp;gt; [/code] This should be saved to /Library/LaunchDaemons/com.sneakypockets.fixHidden.plist. Now when you boot your computer, launchd will run the script and put the Users directory and Shared directory back to there old style.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find the most common user on a system</title>
      <link>http://localhost:1313/posts/find-the-most-common-user-on-a-system/</link>
      <pubDate>Thu, 07 Nov 2013 01:46:51 +0000</pubDate>
      <guid>http://localhost:1313/posts/find-the-most-common-user-on-a-system/</guid>
      <description>&lt;p&gt;I wrote this shell script for a client that was using JAMF&amp;rsquo;s Casper Suite.  It is in the form of an extended attribute, but can easily be changed to output as you want. The script uses the last command to find all the previous logins and then finds the most common user and reports it.  If less than 10 logins have occurred, the script reports the most recent login.```&#xA;#!/bin/sh&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
